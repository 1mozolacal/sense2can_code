
s2c_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001588  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00001588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a3c  20000018  000015a0  00020018  2**2
                  ALLOC
  3 .stack        00002004  20000a54  00001fdc  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020eab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a1d  00000000  00000000  00040f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003495  00000000  00000000  00043961  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000410  00000000  00000000  00046df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000438  00000000  00000000  00047206  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c13e  00000000  00000000  0004763e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009a28  00000000  00000000  0006377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099499  00000000  00000000  0006d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000938  00000000  00000000  00106640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 2a 00 20 81 0f 00 00 7d 0f 00 00 7d 0f 00 00     X*. ....}...}...
	...
      2c:	7d 0f 00 00 00 00 00 00 00 00 00 00 7d 0f 00 00     }...........}...
      3c:	7d 0f 00 00 7d 0f 00 00 7d 0f 00 00 7d 0f 00 00     }...}...}...}...
      4c:	7d 0f 00 00 7d 0f 00 00 7d 0f 00 00 7d 0f 00 00     }...}...}...}...
      5c:	7d 0f 00 00 7d 0f 00 00 09 08 00 00 19 08 00 00     }...}...........
      6c:	29 08 00 00 39 08 00 00 00 00 00 00 00 00 00 00     )...9...........
      7c:	7d 0f 00 00 7d 0f 00 00 7d 0f 00 00 7d 0f 00 00     }...}...}...}...
      8c:	7d 0f 00 00 7d 0f 00 00 7d 0f 00 00 7d 0f 00 00     }...}...}...}...
      9c:	7d 0f 00 00 7d 0f 00 00 41 07 00 00 51 07 00 00     }...}...A...Q...
      ac:	7d 0f 00 00 7d 0f 00 00 7d 0f 00 00 7d 0f 00 00     }...}...}...}...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000018 	.word	0x20000018
      dc:	00000000 	.word	0x00000000
      e0:	00001588 	.word	0x00001588

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000001c 	.word	0x2000001c
     110:	00001588 	.word	0x00001588
     114:	00001588 	.word	0x00001588
     118:	00000000 	.word	0x00000000

0000011c <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_adc_get_inst_index+0x1c>)
     11e:	4298      	cmp	r0, r3
     120:	d008      	beq.n	134 <_adc_get_inst_index+0x18>
     122:	4a06      	ldr	r2, [pc, #24]	; (13c <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     124:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     126:	4290      	cmp	r0, r2
     128:	d001      	beq.n	12e <_adc_get_inst_index+0x12>
}
     12a:	0018      	movs	r0, r3
     12c:	4770      	bx	lr
     12e:	3301      	adds	r3, #1
			return i;
     130:	b2db      	uxtb	r3, r3
     132:	e7fa      	b.n	12a <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     134:	2300      	movs	r3, #0
     136:	e7fb      	b.n	130 <_adc_get_inst_index+0x14>
     138:	42004400 	.word	0x42004400
     13c:	42004800 	.word	0x42004800

00000140 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     140:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     142:	2300      	movs	r3, #0
     144:	2200      	movs	r2, #0
     146:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     148:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     14a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     14c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     14e:	2100      	movs	r1, #0
     150:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     152:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     154:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     156:	2401      	movs	r4, #1
     158:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     15a:	24c0      	movs	r4, #192	; 0xc0
     15c:	0164      	lsls	r4, r4, #5
     15e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     160:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     162:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     164:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     166:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     168:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     16a:	242a      	movs	r4, #42	; 0x2a
     16c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     16e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     170:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     172:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     174:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     176:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     178:	3c06      	subs	r4, #6
     17a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     17c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     17e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     180:	7541      	strb	r1, [r0, #21]
}
     182:	bd10      	pop	{r4, pc}

00000184 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	46de      	mov	lr, fp
     188:	4657      	mov	r7, sl
     18a:	464e      	mov	r6, r9
     18c:	4645      	mov	r5, r8
     18e:	b5e0      	push	{r5, r6, r7, lr}
     190:	b09f      	sub	sp, #124	; 0x7c
     192:	0005      	movs	r5, r0
     194:	000e      	movs	r6, r1
     196:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     198:	0008      	movs	r0, r1
     19a:	4b98      	ldr	r3, [pc, #608]	; (3fc <adc_init+0x278>)
     19c:	4798      	blx	r3
     19e:	0004      	movs	r4, r0
     1a0:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1a2:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1a4:	4a96      	ldr	r2, [pc, #600]	; (400 <adc_init+0x27c>)
     1a6:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     1a8:	0080      	lsls	r0, r0, #2
     1aa:	4996      	ldr	r1, [pc, #600]	; (404 <adc_init+0x280>)
     1ac:	5841      	ldr	r1, [r0, r1]
     1ae:	430b      	orrs	r3, r1
     1b0:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b2:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d506      	bpl.n	1c8 <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     1ba:	b01f      	add	sp, #124	; 0x7c
     1bc:	bc3c      	pop	{r2, r3, r4, r5}
     1be:	4690      	mov	r8, r2
     1c0:	4699      	mov	r9, r3
     1c2:	46a2      	mov	sl, r4
     1c4:	46ab      	mov	fp, r5
     1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     1ca:	8c13      	ldrh	r3, [r2, #32]
     1cc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     1ce:	2b00      	cmp	r3, #0
     1d0:	d1fb      	bne.n	1ca <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4ef      	bmi.n	1ba <adc_init+0x36>
	module_inst->reference = config->reference;
     1da:	787b      	ldrb	r3, [r7, #1]
     1dc:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1e2:	4a89      	ldr	r2, [pc, #548]	; (408 <adc_init+0x284>)
     1e4:	69d3      	ldr	r3, [r2, #28]
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60ab      	str	r3, [r5, #8]
     1f0:	60eb      	str	r3, [r5, #12]
     1f2:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1f8:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     1fc:	00a3      	lsls	r3, r4, #2
     1fe:	4a83      	ldr	r2, [pc, #524]	; (40c <adc_init+0x288>)
     200:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     202:	232a      	movs	r3, #42	; 0x2a
     204:	5cfb      	ldrb	r3, [r7, r3]
     206:	2b00      	cmp	r3, #0
     208:	d105      	bne.n	216 <adc_init+0x92>
     20a:	7b3b      	ldrb	r3, [r7, #12]
     20c:	2b00      	cmp	r3, #0
     20e:	d102      	bne.n	216 <adc_init+0x92>
		module_inst->software_trigger = true;
     210:	3301      	adds	r3, #1
     212:	776b      	strb	r3, [r5, #29]
     214:	e001      	b.n	21a <adc_init+0x96>
		module_inst->software_trigger = false;
     216:	2300      	movs	r3, #0
     218:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     21a:	682b      	ldr	r3, [r5, #0]
     21c:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21e:	783b      	ldrb	r3, [r7, #0]
     220:	aa04      	add	r2, sp, #16
     222:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     224:	4b7a      	ldr	r3, [pc, #488]	; (410 <adc_init+0x28c>)
     226:	5d1e      	ldrb	r6, [r3, r4]
     228:	0011      	movs	r1, r2
     22a:	0030      	movs	r0, r6
     22c:	4b79      	ldr	r3, [pc, #484]	; (414 <adc_init+0x290>)
     22e:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     230:	0030      	movs	r0, r6
     232:	4b79      	ldr	r3, [pc, #484]	; (418 <adc_init+0x294>)
     234:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     236:	793b      	ldrb	r3, [r7, #4]
     238:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     23a:	ae06      	add	r6, sp, #24
     23c:	4b77      	ldr	r3, [pc, #476]	; (41c <adc_init+0x298>)
     23e:	469c      	mov	ip, r3
     240:	0032      	movs	r2, r6
     242:	0019      	movs	r1, r3
     244:	c949      	ldmia	r1!, {r0, r3, r6}
     246:	c249      	stmia	r2!, {r0, r3, r6}
     248:	c949      	ldmia	r1!, {r0, r3, r6}
     24a:	c249      	stmia	r2!, {r0, r3, r6}
     24c:	c949      	ldmia	r1!, {r0, r3, r6}
     24e:	c249      	stmia	r2!, {r0, r3, r6}
     250:	c949      	ldmia	r1!, {r0, r3, r6}
     252:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     254:	a912      	add	r1, sp, #72	; 0x48
     256:	4663      	mov	r3, ip
     258:	3330      	adds	r3, #48	; 0x30
     25a:	000a      	movs	r2, r1
     25c:	cb43      	ldmia	r3!, {r0, r1, r6}
     25e:	c243      	stmia	r2!, {r0, r1, r6}
     260:	cb43      	ldmia	r3!, {r0, r1, r6}
     262:	c243      	stmia	r2!, {r0, r1, r6}
     264:	cb43      	ldmia	r3!, {r0, r1, r6}
     266:	c243      	stmia	r2!, {r0, r1, r6}
     268:	cb43      	ldmia	r3!, {r0, r1, r6}
     26a:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     26c:	9b01      	ldr	r3, [sp, #4]
     26e:	2b00      	cmp	r3, #0
     270:	d004      	beq.n	27c <adc_init+0xf8>
		pinmapping = pinmapping1;
     272:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     274:	2b01      	cmp	r3, #1
     276:	d002      	beq.n	27e <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     278:	2100      	movs	r1, #0
     27a:	e000      	b.n	27e <adc_init+0xfa>
		pinmapping = pinmapping0;
     27c:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     27e:	00a3      	lsls	r3, r4, #2
     280:	4a67      	ldr	r2, [pc, #412]	; (420 <adc_init+0x29c>)
     282:	589b      	ldr	r3, [r3, r2]
     284:	469b      	mov	fp, r3
     286:	4598      	cmp	r8, r3
     288:	d922      	bls.n	2d0 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     28a:	88fb      	ldrh	r3, [r7, #6]
     28c:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     28e:	ae06      	add	r6, sp, #24
     290:	4b62      	ldr	r3, [pc, #392]	; (41c <adc_init+0x298>)
     292:	469c      	mov	ip, r3
     294:	0032      	movs	r2, r6
     296:	0019      	movs	r1, r3
     298:	c949      	ldmia	r1!, {r0, r3, r6}
     29a:	c249      	stmia	r2!, {r0, r3, r6}
     29c:	c949      	ldmia	r1!, {r0, r3, r6}
     29e:	c249      	stmia	r2!, {r0, r3, r6}
     2a0:	c949      	ldmia	r1!, {r0, r3, r6}
     2a2:	c249      	stmia	r2!, {r0, r3, r6}
     2a4:	c949      	ldmia	r1!, {r0, r3, r6}
     2a6:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     2a8:	a912      	add	r1, sp, #72	; 0x48
     2aa:	4663      	mov	r3, ip
     2ac:	3330      	adds	r3, #48	; 0x30
     2ae:	000a      	movs	r2, r1
     2b0:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b2:	c243      	stmia	r2!, {r0, r1, r6}
     2b4:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b6:	c243      	stmia	r2!, {r0, r1, r6}
     2b8:	cb43      	ldmia	r3!, {r0, r1, r6}
     2ba:	c243      	stmia	r2!, {r0, r1, r6}
     2bc:	cb43      	ldmia	r3!, {r0, r1, r6}
     2be:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     2c0:	9a01      	ldr	r2, [sp, #4]
     2c2:	2a00      	cmp	r2, #0
     2c4:	d012      	beq.n	2ec <adc_init+0x168>
		pinmapping = pinmapping1;
     2c6:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     2c8:	2a01      	cmp	r2, #1
     2ca:	d010      	beq.n	2ee <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     2cc:	2300      	movs	r3, #0
     2ce:	e00e      	b.n	2ee <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d0:	4643      	mov	r3, r8
     2d2:	0098      	lsls	r0, r3, #2
     2d4:	5840      	ldr	r0, [r0, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	a905      	add	r1, sp, #20
     2d8:	2300      	movs	r3, #0
     2da:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2dc:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2de:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e0:	3301      	adds	r3, #1
     2e2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b4f      	ldr	r3, [pc, #316]	; (424 <adc_init+0x2a0>)
     2e8:	4798      	blx	r3
     2ea:	e7ce      	b.n	28a <adc_init+0x106>
		pinmapping = pinmapping0;
     2ec:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     2ee:	45d8      	cmp	r8, fp
     2f0:	d90a      	bls.n	308 <adc_init+0x184>
     2f2:	2100      	movs	r1, #0
     2f4:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     2f6:	2301      	movs	r3, #1
     2f8:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     2fa:	4b48      	ldr	r3, [pc, #288]	; (41c <adc_init+0x298>)
     2fc:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     2fe:	9403      	str	r4, [sp, #12]
     300:	465b      	mov	r3, fp
     302:	9302      	str	r3, [sp, #8]
     304:	46ab      	mov	fp, r5
     306:	e020      	b.n	34a <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     308:	4642      	mov	r2, r8
     30a:	0090      	lsls	r0, r2, #2
     30c:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     30e:	a905      	add	r1, sp, #20
     310:	2300      	movs	r3, #0
     312:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     314:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     316:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     318:	3301      	adds	r3, #1
     31a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     31c:	b2c0      	uxtb	r0, r0
     31e:	4b41      	ldr	r3, [pc, #260]	; (424 <adc_init+0x2a0>)
     320:	4798      	blx	r3
     322:	e7e6      	b.n	2f2 <adc_init+0x16e>
		pinmapping = pinmapping0;
     324:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     326:	0089      	lsls	r1, r1, #2
     328:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32a:	a905      	add	r1, sp, #20
     32c:	2300      	movs	r3, #0
     32e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     330:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     332:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     334:	464b      	mov	r3, r9
     336:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     338:	b2c0      	uxtb	r0, r0
     33a:	4b3a      	ldr	r3, [pc, #232]	; (424 <adc_init+0x2a0>)
     33c:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     33e:	3601      	adds	r6, #1
     340:	b2f6      	uxtb	r6, r6
     342:	0031      	movs	r1, r6
     344:	9b02      	ldr	r3, [sp, #8]
     346:	429e      	cmp	r6, r3
     348:	d823      	bhi.n	392 <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     34a:	464b      	mov	r3, r9
     34c:	40b3      	lsls	r3, r6
     34e:	693a      	ldr	r2, [r7, #16]
     350:	421a      	tst	r2, r3
     352:	d0f4      	beq.n	33e <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     354:	a806      	add	r0, sp, #24
     356:	0003      	movs	r3, r0
     358:	4642      	mov	r2, r8
     35a:	ca31      	ldmia	r2!, {r0, r4, r5}
     35c:	c331      	stmia	r3!, {r0, r4, r5}
     35e:	ca31      	ldmia	r2!, {r0, r4, r5}
     360:	c331      	stmia	r3!, {r0, r4, r5}
     362:	ca31      	ldmia	r2!, {r0, r4, r5}
     364:	c331      	stmia	r3!, {r0, r4, r5}
     366:	ca31      	ldmia	r2!, {r0, r4, r5}
     368:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     36a:	a812      	add	r0, sp, #72	; 0x48
     36c:	4643      	mov	r3, r8
     36e:	3330      	adds	r3, #48	; 0x30
     370:	0002      	movs	r2, r0
     372:	cb31      	ldmia	r3!, {r0, r4, r5}
     374:	c231      	stmia	r2!, {r0, r4, r5}
     376:	cb31      	ldmia	r3!, {r0, r4, r5}
     378:	c231      	stmia	r2!, {r0, r4, r5}
     37a:	cb31      	ldmia	r3!, {r0, r4, r5}
     37c:	c231      	stmia	r2!, {r0, r4, r5}
     37e:	cb31      	ldmia	r3!, {r0, r4, r5}
     380:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     382:	9a01      	ldr	r2, [sp, #4]
     384:	2a00      	cmp	r2, #0
     386:	d0cd      	beq.n	324 <adc_init+0x1a0>
		pinmapping = pinmapping1;
     388:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     38a:	2a01      	cmp	r2, #1
     38c:	d0cb      	beq.n	326 <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     38e:	2300      	movs	r3, #0
     390:	e7c9      	b.n	326 <adc_init+0x1a2>
     392:	465d      	mov	r5, fp
     394:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     396:	7b7b      	ldrb	r3, [r7, #13]
     398:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     39a:	7bba      	ldrb	r2, [r7, #14]
     39c:	01d2      	lsls	r2, r2, #7
     39e:	4313      	orrs	r3, r2
     3a0:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     3a2:	4652      	mov	r2, sl
     3a4:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     3a6:	7d3b      	ldrb	r3, [r7, #20]
     3a8:	01db      	lsls	r3, r3, #7
			| (config->reference);
     3aa:	787a      	ldrb	r2, [r7, #1]
     3ac:	4313      	orrs	r3, r2
     3ae:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     3b0:	4652      	mov	r2, sl
     3b2:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     3b4:	78fb      	ldrb	r3, [r7, #3]
     3b6:	2b34      	cmp	r3, #52	; 0x34
     3b8:	d900      	bls.n	3bc <adc_init+0x238>
     3ba:	e14f      	b.n	65c <adc_init+0x4d8>
     3bc:	009b      	lsls	r3, r3, #2
     3be:	4a1a      	ldr	r2, [pc, #104]	; (428 <adc_init+0x2a4>)
     3c0:	58d3      	ldr	r3, [r2, r3]
     3c2:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3c4:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     3c6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     3c8:	2102      	movs	r1, #2
     3ca:	e032      	b.n	432 <adc_init+0x2ae>
		adjres = config->divide_result;
     3cc:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     3ce:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2610      	movs	r6, #16
     3d2:	e02e      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3d4:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     3d6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3d8:	2101      	movs	r1, #1
     3da:	e02a      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3dc:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     3de:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3e0:	2100      	movs	r1, #0
     3e2:	e026      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     3e6:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     3e8:	2100      	movs	r1, #0
     3ea:	e022      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     3ee:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     3f0:	2100      	movs	r1, #0
     3f2:	e01e      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3f4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     3f6:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     3f8:	2100      	movs	r1, #0
     3fa:	e01a      	b.n	432 <adc_init+0x2ae>
     3fc:	0000011d 	.word	0x0000011d
     400:	40000800 	.word	0x40000800
     404:	00001538 	.word	0x00001538
     408:	40001800 	.word	0x40001800
     40c:	200009e0 	.word	0x200009e0
     410:	00001560 	.word	0x00001560
     414:	00000e21 	.word	0x00000e21
     418:	00000db1 	.word	0x00000db1
     41c:	000014d8 	.word	0x000014d8
     420:	00001558 	.word	0x00001558
     424:	00000eed 	.word	0x00000eed
     428:	00001404 	.word	0x00001404
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42c:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     430:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     432:	0109      	lsls	r1, r1, #4
     434:	2370      	movs	r3, #112	; 0x70
     436:	400b      	ands	r3, r1
     438:	4313      	orrs	r3, r2
     43a:	4652      	mov	r2, sl
     43c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     43e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     440:	8c13      	ldrh	r3, [r2, #32]
     442:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     444:	2b00      	cmp	r3, #0
     446:	d1fb      	bne.n	440 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     448:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     44a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     44c:	2b3f      	cmp	r3, #63	; 0x3f
     44e:	d900      	bls.n	452 <adc_init+0x2ce>
     450:	e6b3      	b.n	1ba <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     452:	7bfa      	ldrb	r2, [r7, #15]
     454:	01d2      	lsls	r2, r2, #7
     456:	4313      	orrs	r3, r2
     458:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     45a:	4652      	mov	r2, sl
     45c:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     45e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     460:	8c13      	ldrh	r3, [r2, #32]
     462:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     464:	2b00      	cmp	r3, #0
     466:	d1fb      	bne.n	460 <adc_init+0x2dc>
			config->clock_prescaler;
     468:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     46a:	4652      	mov	r2, sl
     46c:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     46e:	2324      	movs	r3, #36	; 0x24
     470:	5cfb      	ldrb	r3, [r7, r3]
     472:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     474:	7b3a      	ldrb	r2, [r7, #12]
     476:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     478:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     47a:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     47c:	4313      	orrs	r3, r2
     47e:	7aba      	ldrb	r2, [r7, #10]
     480:	0052      	lsls	r2, r2, #1
     482:	4313      	orrs	r3, r2
     484:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     486:	4652      	mov	r2, sl
     488:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     48a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     48c:	8c13      	ldrh	r3, [r2, #32]
     48e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     490:	2b00      	cmp	r3, #0
     492:	d1fb      	bne.n	48c <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     494:	8b3b      	ldrh	r3, [r7, #24]
     496:	2b00      	cmp	r3, #0
     498:	d020      	beq.n	4dc <adc_init+0x358>
		switch (resolution) {
     49a:	2e10      	cmp	r6, #16
     49c:	d100      	bne.n	4a0 <adc_init+0x31c>
     49e:	e0bf      	b.n	620 <adc_init+0x49c>
     4a0:	d800      	bhi.n	4a4 <adc_init+0x320>
     4a2:	e07f      	b.n	5a4 <adc_init+0x420>
     4a4:	2e20      	cmp	r6, #32
     4a6:	d100      	bne.n	4aa <adc_init+0x326>
     4a8:	e09c      	b.n	5e4 <adc_init+0x460>
     4aa:	2e30      	cmp	r6, #48	; 0x30
     4ac:	d116      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     4ae:	7afa      	ldrb	r2, [r7, #11]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d00a      	beq.n	4ca <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     4b4:	69fa      	ldr	r2, [r7, #28]
     4b6:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4ba:	2aff      	cmp	r2, #255	; 0xff
     4bc:	d900      	bls.n	4c0 <adc_init+0x33c>
     4be:	e67c      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     4c0:	6a3a      	ldr	r2, [r7, #32]
     4c2:	3280      	adds	r2, #128	; 0x80
     4c4:	2aff      	cmp	r2, #255	; 0xff
     4c6:	d900      	bls.n	4ca <adc_init+0x346>
     4c8:	e677      	b.n	1ba <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     4ca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4cc:	69fa      	ldr	r2, [r7, #28]
     4ce:	2aff      	cmp	r2, #255	; 0xff
     4d0:	dd00      	ble.n	4d4 <adc_init+0x350>
     4d2:	e672      	b.n	1ba <adc_init+0x36>
     4d4:	6a3a      	ldr	r2, [r7, #32]
     4d6:	2aff      	cmp	r2, #255	; 0xff
     4d8:	dd00      	ble.n	4dc <adc_init+0x358>
     4da:	e66e      	b.n	1ba <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     4dc:	4652      	mov	r2, sl
     4de:	8952      	ldrh	r2, [r2, #10]
     4e0:	4313      	orrs	r3, r2
     4e2:	4652      	mov	r2, sl
     4e4:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     4e6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4e8:	8c13      	ldrh	r3, [r2, #32]
     4ea:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	d1fb      	bne.n	4e8 <adc_init+0x364>
	adc_module->WINLT.reg =
     4f0:	8bbb      	ldrh	r3, [r7, #28]
     4f2:	4652      	mov	r2, sl
     4f4:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
     4f6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4f8:	8c13      	ldrh	r3, [r2, #32]
     4fa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4fc:	2b00      	cmp	r3, #0
     4fe:	d1fb      	bne.n	4f8 <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     500:	8c3b      	ldrh	r3, [r7, #32]
     502:	4652      	mov	r2, sl
     504:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
     506:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     508:	8c13      	ldrh	r3, [r2, #32]
     50a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     50c:	2b00      	cmp	r3, #0
     50e:	d1fb      	bne.n	508 <adc_init+0x384>
			config->positive_input;
     510:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
     512:	88fa      	ldrh	r2, [r7, #6]
     514:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     516:	4652      	mov	r2, sl
     518:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     51a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     51c:	8c13      	ldrh	r3, [r2, #32]
     51e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     520:	2b00      	cmp	r3, #0
     522:	d1fb      	bne.n	51c <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
     524:	332a      	adds	r3, #42	; 0x2a
     526:	5cfb      	ldrb	r3, [r7, r3]
     528:	4652      	mov	r2, sl
     52a:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
     52c:	2307      	movs	r3, #7
     52e:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
     530:	331d      	adds	r3, #29
     532:	5cfb      	ldrb	r3, [r7, r3]
     534:	2b00      	cmp	r3, #0
     536:	d01d      	beq.n	574 <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     53a:	4a49      	ldr	r2, [pc, #292]	; (660 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
     53c:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     53e:	4293      	cmp	r3, r2
     540:	d900      	bls.n	544 <adc_init+0x3c0>
     542:	e63a      	b.n	1ba <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     544:	4652      	mov	r2, sl
     546:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
     548:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     54a:	8c13      	ldrh	r3, [r2, #32]
     54c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     54e:	2b00      	cmp	r3, #0
     550:	d1fb      	bne.n	54a <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
     552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     554:	2380      	movs	r3, #128	; 0x80
     556:	011b      	lsls	r3, r3, #4
     558:	18d3      	adds	r3, r2, r3
     55a:	4941      	ldr	r1, [pc, #260]	; (660 <adc_init+0x4dc>)
     55c:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     560:	428b      	cmp	r3, r1
     562:	d900      	bls.n	566 <adc_init+0x3e2>
     564:	e629      	b.n	1ba <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     566:	4653      	mov	r3, sl
     568:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
     574:	00a2      	lsls	r2, r4, #2
     576:	4b3b      	ldr	r3, [pc, #236]	; (664 <adc_init+0x4e0>)
     578:	58d3      	ldr	r3, [r2, r3]
     57a:	493b      	ldr	r1, [pc, #236]	; (668 <adc_init+0x4e4>)
     57c:	5d09      	ldrb	r1, [r1, r4]
     57e:	681b      	ldr	r3, [r3, #0]
     580:	40cb      	lsrs	r3, r1
     582:	021b      	lsls	r3, r3, #8
     584:	21e0      	movs	r1, #224	; 0xe0
     586:	00c9      	lsls	r1, r1, #3
     588:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
     58a:	4938      	ldr	r1, [pc, #224]	; (66c <adc_init+0x4e8>)
     58c:	5852      	ldr	r2, [r2, r1]
     58e:	4938      	ldr	r1, [pc, #224]	; (670 <adc_init+0x4ec>)
     590:	5d09      	ldrb	r1, [r1, r4]
     592:	6812      	ldr	r2, [r2, #0]
     594:	40ca      	lsrs	r2, r1
     596:	2107      	movs	r1, #7
     598:	400a      	ands	r2, r1
			) |
     59a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     59c:	4652      	mov	r2, sl
     59e:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
     5a2:	e60a      	b.n	1ba <adc_init+0x36>
		switch (resolution) {
     5a4:	2e00      	cmp	r6, #0
     5a6:	d199      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5a8:	7afa      	ldrb	r2, [r7, #11]
     5aa:	2a00      	cmp	r2, #0
     5ac:	d00f      	beq.n	5ce <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
     5ae:	69fa      	ldr	r2, [r7, #28]
     5b0:	2180      	movs	r1, #128	; 0x80
     5b2:	0109      	lsls	r1, r1, #4
     5b4:	468c      	mov	ip, r1
     5b6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5b8:	4929      	ldr	r1, [pc, #164]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5bc:	428a      	cmp	r2, r1
     5be:	d900      	bls.n	5c2 <adc_init+0x43e>
     5c0:	e5fb      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
     5c2:	6a3a      	ldr	r2, [r7, #32]
     5c4:	4462      	add	r2, ip
     5c6:	4926      	ldr	r1, [pc, #152]	; (660 <adc_init+0x4dc>)
     5c8:	428a      	cmp	r2, r1
     5ca:	d900      	bls.n	5ce <adc_init+0x44a>
     5cc:	e5f5      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
     5ce:	4a24      	ldr	r2, [pc, #144]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5d2:	69f9      	ldr	r1, [r7, #28]
     5d4:	4291      	cmp	r1, r2
     5d6:	dd00      	ble.n	5da <adc_init+0x456>
     5d8:	e5ef      	b.n	1ba <adc_init+0x36>
     5da:	6a39      	ldr	r1, [r7, #32]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x45e>
     5e0:	e5eb      	b.n	1ba <adc_init+0x36>
     5e2:	e77b      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5e4:	7afa      	ldrb	r2, [r7, #11]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d00f      	beq.n	60a <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
     5ea:	69fa      	ldr	r2, [r7, #28]
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	0089      	lsls	r1, r1, #2
     5f0:	468c      	mov	ip, r1
     5f2:	4462      	add	r2, ip
			if (config->differential_mode &&
     5f4:	491f      	ldr	r1, [pc, #124]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5f8:	428a      	cmp	r2, r1
     5fa:	d900      	bls.n	5fe <adc_init+0x47a>
     5fc:	e5dd      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -512 ||
     5fe:	6a3a      	ldr	r2, [r7, #32]
     600:	4462      	add	r2, ip
     602:	491c      	ldr	r1, [pc, #112]	; (674 <adc_init+0x4f0>)
     604:	428a      	cmp	r2, r1
     606:	d900      	bls.n	60a <adc_init+0x486>
     608:	e5d7      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
     60a:	4a1a      	ldr	r2, [pc, #104]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     60c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     60e:	69f9      	ldr	r1, [r7, #28]
     610:	4291      	cmp	r1, r2
     612:	dd00      	ble.n	616 <adc_init+0x492>
     614:	e5d1      	b.n	1ba <adc_init+0x36>
     616:	6a39      	ldr	r1, [r7, #32]
     618:	4291      	cmp	r1, r2
     61a:	dd00      	ble.n	61e <adc_init+0x49a>
     61c:	e5cd      	b.n	1ba <adc_init+0x36>
     61e:	e75d      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     620:	7afa      	ldrb	r2, [r7, #11]
     622:	2a00      	cmp	r2, #0
     624:	d00f      	beq.n	646 <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
     626:	69fa      	ldr	r2, [r7, #28]
     628:	2180      	movs	r1, #128	; 0x80
     62a:	0209      	lsls	r1, r1, #8
     62c:	468c      	mov	ip, r1
     62e:	4462      	add	r2, ip
			if (config->differential_mode &&
     630:	4911      	ldr	r1, [pc, #68]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			if (config->differential_mode &&
     634:	428a      	cmp	r2, r1
     636:	d900      	bls.n	63a <adc_init+0x4b6>
     638:	e5bf      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
     63a:	6a3a      	ldr	r2, [r7, #32]
     63c:	4462      	add	r2, ip
     63e:	490e      	ldr	r1, [pc, #56]	; (678 <adc_init+0x4f4>)
     640:	428a      	cmp	r2, r1
     642:	d900      	bls.n	646 <adc_init+0x4c2>
     644:	e5b9      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
     646:	4a0c      	ldr	r2, [pc, #48]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     648:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     64a:	69f9      	ldr	r1, [r7, #28]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x4ce>
     650:	e5b3      	b.n	1ba <adc_init+0x36>
     652:	6a39      	ldr	r1, [r7, #32]
     654:	4291      	cmp	r1, r2
     656:	dd00      	ble.n	65a <adc_init+0x4d6>
     658:	e5af      	b.n	1ba <adc_init+0x36>
     65a:	e73f      	b.n	4dc <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
     65c:	2017      	movs	r0, #23
     65e:	e5ac      	b.n	1ba <adc_init+0x36>
     660:	00000fff 	.word	0x00000fff
     664:	0000154c 	.word	0x0000154c
     668:	00001554 	.word	0x00001554
     66c:	00001540 	.word	0x00001540
     670:	00001548 	.word	0x00001548
     674:	000003ff 	.word	0x000003ff
     678:	0000ffff 	.word	0x0000ffff

0000067c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     67e:	0080      	lsls	r0, r0, #2
     680:	4b2e      	ldr	r3, [pc, #184]	; (73c <_adc_interrupt_handler+0xc0>)
     682:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     684:	6823      	ldr	r3, [r4, #0]
     686:	799a      	ldrb	r2, [r3, #6]
     688:	795d      	ldrb	r5, [r3, #5]
     68a:	4015      	ands	r5, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     68c:	07ea      	lsls	r2, r5, #31
     68e:	d52a      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     690:	2201      	movs	r2, #1
     692:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     694:	6962      	ldr	r2, [r4, #20]
     696:	1c93      	adds	r3, r2, #2
     698:	6163      	str	r3, [r4, #20]
     69a:	6823      	ldr	r3, [r4, #0]
     69c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     69e:	b29b      	uxth	r3, r3
     6a0:	8013      	strh	r3, [r2, #0]

		if (--module->remaining_conversions > 0) {
     6a2:	8b23      	ldrh	r3, [r4, #24]
     6a4:	3b01      	subs	r3, #1
     6a6:	b29b      	uxth	r3, r3
     6a8:	8323      	strh	r3, [r4, #24]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d015      	beq.n	6da <_adc_interrupt_handler+0x5e>
			if (module->software_trigger == true
     6ae:	7f63      	ldrb	r3, [r4, #29]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d018      	beq.n	6e6 <_adc_interrupt_handler+0x6a>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6b4:	6822      	ldr	r2, [r4, #0]
     6b6:	79d3      	ldrb	r3, [r2, #7]
     6b8:	b25b      	sxtb	r3, r3
     6ba:	2b00      	cmp	r3, #0
     6bc:	db13      	blt.n	6e6 <_adc_interrupt_handler+0x6a>
     6be:	8c13      	ldrh	r3, [r2, #32]
     6c0:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6c2:	2b00      	cmp	r3, #0
     6c4:	d1fb      	bne.n	6be <_adc_interrupt_handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6c6:	7e13      	ldrb	r3, [r2, #24]
     6c8:	2102      	movs	r1, #2
     6ca:	430b      	orrs	r3, r1
     6cc:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     6ce:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     6d0:	8c13      	ldrh	r3, [r2, #32]
     6d2:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     6d4:	2b00      	cmp	r3, #0
     6d6:	d1fb      	bne.n	6d0 <_adc_interrupt_handler+0x54>
     6d8:	e005      	b.n	6e6 <_adc_interrupt_handler+0x6a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6da:	2301      	movs	r3, #1
     6dc:	6822      	ldr	r2, [r4, #0]
     6de:	7113      	strb	r3, [r2, #4]
				adc_start_conversion(module);
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
			if (module->job_status == STATUS_BUSY) {
     6e0:	7f23      	ldrb	r3, [r4, #28]
     6e2:	2b05      	cmp	r3, #5
     6e4:	d016      	beq.n	714 <_adc_interrupt_handler+0x98>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     6e6:	076b      	lsls	r3, r5, #29
     6e8:	d508      	bpl.n	6fc <_adc_interrupt_handler+0x80>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ea:	2304      	movs	r3, #4
     6ec:	6822      	ldr	r2, [r4, #0]
     6ee:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6f0:	7ee3      	ldrb	r3, [r4, #27]
     6f2:	079b      	lsls	r3, r3, #30
     6f4:	d502      	bpl.n	6fc <_adc_interrupt_handler+0x80>
     6f6:	7ea3      	ldrb	r3, [r4, #26]
     6f8:	079b      	lsls	r3, r3, #30
     6fa:	d417      	bmi.n	72c <_adc_interrupt_handler+0xb0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     6fc:	07ab      	lsls	r3, r5, #30
     6fe:	d508      	bpl.n	712 <_adc_interrupt_handler+0x96>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     700:	2302      	movs	r3, #2
     702:	6822      	ldr	r2, [r4, #0]
     704:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     706:	7ee3      	ldrb	r3, [r4, #27]
     708:	075b      	lsls	r3, r3, #29
     70a:	d502      	bpl.n	712 <_adc_interrupt_handler+0x96>
     70c:	7ea3      	ldrb	r3, [r4, #26]
     70e:	075b      	lsls	r3, r3, #29
     710:	d410      	bmi.n	734 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     712:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     714:	2300      	movs	r3, #0
     716:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     718:	7ee3      	ldrb	r3, [r4, #27]
     71a:	07db      	lsls	r3, r3, #31
     71c:	d5e3      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     71e:	7ea3      	ldrb	r3, [r4, #26]
     720:	07db      	lsls	r3, r3, #31
     722:	d5e0      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     724:	0020      	movs	r0, r4
     726:	68a3      	ldr	r3, [r4, #8]
     728:	4798      	blx	r3
     72a:	e7dc      	b.n	6e6 <_adc_interrupt_handler+0x6a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     72c:	0020      	movs	r0, r4
     72e:	68e3      	ldr	r3, [r4, #12]
     730:	4798      	blx	r3
     732:	e7e3      	b.n	6fc <_adc_interrupt_handler+0x80>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     734:	6923      	ldr	r3, [r4, #16]
     736:	0020      	movs	r0, r4
     738:	4798      	blx	r3
}
     73a:	e7ea      	b.n	712 <_adc_interrupt_handler+0x96>
     73c:	200009e0 	.word	0x200009e0

00000740 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     740:	b510      	push	{r4, lr}
     742:	2000      	movs	r0, #0
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <ADC0_Handler+0xc>)
     746:	4798      	blx	r3
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	0000067d 	.word	0x0000067d

00000750 <ADC1_Handler>:
     750:	b510      	push	{r4, lr}
     752:	2001      	movs	r0, #1
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <ADC1_Handler+0xc>)
     756:	4798      	blx	r3
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	0000067d 	.word	0x0000067d

00000760 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     760:	1c93      	adds	r3, r2, #2
     762:	009b      	lsls	r3, r3, #2
     764:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     766:	2301      	movs	r3, #1
     768:	4093      	lsls	r3, r2
     76a:	001a      	movs	r2, r3
     76c:	7e83      	ldrb	r3, [r0, #26]
     76e:	4313      	orrs	r3, r2
     770:	7683      	strb	r3, [r0, #26]
}
     772:	4770      	bx	lr

00000774 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     774:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     776:	8b03      	ldrh	r3, [r0, #24]
     778:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     77a:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     77c:	2b00      	cmp	r3, #0
     77e:	d001      	beq.n	784 <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     780:	0020      	movs	r0, r4
     782:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     784:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     786:	2b05      	cmp	r3, #5
     788:	d0fa      	beq.n	780 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     78a:	2305      	movs	r3, #5
     78c:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     78e:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     790:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     792:	3b04      	subs	r3, #4
     794:	6802      	ldr	r2, [r0, #0]
     796:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
     798:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     79a:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     79c:	2b00      	cmp	r3, #0
     79e:	d0ef      	beq.n	780 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     7a0:	6802      	ldr	r2, [r0, #0]
     7a2:	8c13      	ldrh	r3, [r2, #32]
     7a4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     7a6:	2b00      	cmp	r3, #0
     7a8:	d1fb      	bne.n	7a2 <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     7aa:	7e13      	ldrb	r3, [r2, #24]
     7ac:	2102      	movs	r1, #2
     7ae:	430b      	orrs	r3, r1
     7b0:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     7b2:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     7b4:	8c13      	ldrh	r3, [r2, #32]
     7b6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     7b8:	2b00      	cmp	r3, #0
     7ba:	d1fb      	bne.n	7b4 <adc_read_buffer_job+0x40>
	return STATUS_OK;
     7bc:	2400      	movs	r4, #0
     7be:	e7df      	b.n	780 <adc_read_buffer_job+0xc>

000007c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     7c0:	b500      	push	{lr}
     7c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7c4:	ab01      	add	r3, sp, #4
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     7ca:	780a      	ldrb	r2, [r1, #0]
     7cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     7ce:	784a      	ldrb	r2, [r1, #1]
     7d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     7d2:	788a      	ldrb	r2, [r1, #2]
     7d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     7d6:	0019      	movs	r1, r3
     7d8:	4b01      	ldr	r3, [pc, #4]	; (7e0 <port_pin_set_config+0x20>)
     7da:	4798      	blx	r3
}
     7dc:	b003      	add	sp, #12
     7de:	bd00      	pop	{pc}
     7e0:	00000eed 	.word	0x00000eed

000007e4 <port_group_set_config>:
 */
void port_group_set_config(
		PortGroup *const port,
		const uint32_t mask,
		const struct port_config *const config)
{
     7e4:	b510      	push	{r4, lr}
     7e6:	b082      	sub	sp, #8
     7e8:	ab01      	add	r3, sp, #4
     7ea:	2480      	movs	r4, #128	; 0x80
     7ec:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     7ee:	7814      	ldrb	r4, [r2, #0]
     7f0:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     7f2:	7854      	ldrb	r4, [r2, #1]
     7f4:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     7f6:	7892      	ldrb	r2, [r2, #2]
     7f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_group_set_config(port, mask, &pinmux_config);
     7fa:	001a      	movs	r2, r3
     7fc:	4b01      	ldr	r3, [pc, #4]	; (804 <port_group_set_config+0x20>)
     7fe:	4798      	blx	r3
}
     800:	b002      	add	sp, #8
     802:	bd10      	pop	{r4, pc}
     804:	00000f19 	.word	0x00000f19

00000808 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     808:	b510      	push	{r4, lr}
     80a:	4b02      	ldr	r3, [pc, #8]	; (814 <SERCOM0_Handler+0xc>)
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	2000      	movs	r0, #0
     810:	4798      	blx	r3
     812:	bd10      	pop	{r4, pc}
     814:	20000034 	.word	0x20000034

00000818 <SERCOM1_Handler>:
     818:	b510      	push	{r4, lr}
     81a:	4b02      	ldr	r3, [pc, #8]	; (824 <SERCOM1_Handler+0xc>)
     81c:	685b      	ldr	r3, [r3, #4]
     81e:	2001      	movs	r0, #1
     820:	4798      	blx	r3
     822:	bd10      	pop	{r4, pc}
     824:	20000034 	.word	0x20000034

00000828 <SERCOM2_Handler>:
     828:	b510      	push	{r4, lr}
     82a:	4b02      	ldr	r3, [pc, #8]	; (834 <SERCOM2_Handler+0xc>)
     82c:	689b      	ldr	r3, [r3, #8]
     82e:	2002      	movs	r0, #2
     830:	4798      	blx	r3
     832:	bd10      	pop	{r4, pc}
     834:	20000034 	.word	0x20000034

00000838 <SERCOM3_Handler>:
     838:	b510      	push	{r4, lr}
     83a:	4b02      	ldr	r3, [pc, #8]	; (844 <SERCOM3_Handler+0xc>)
     83c:	68db      	ldr	r3, [r3, #12]
     83e:	2003      	movs	r0, #3
     840:	4798      	blx	r3
     842:	bd10      	pop	{r4, pc}
     844:	20000034 	.word	0x20000034

00000848 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     848:	6803      	ldr	r3, [r0, #0]
     84a:	4a0a      	ldr	r2, [pc, #40]	; (874 <_can_enable_peripheral_clock+0x2c>)
     84c:	4293      	cmp	r3, r2
     84e:	d003      	beq.n	858 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     850:	4a09      	ldr	r2, [pc, #36]	; (878 <_can_enable_peripheral_clock+0x30>)
     852:	4293      	cmp	r3, r2
     854:	d007      	beq.n	866 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     856:	4770      	bx	lr
	MCLK->AHBMASK.reg |= ahb_mask;
     858:	4a08      	ldr	r2, [pc, #32]	; (87c <_can_enable_peripheral_clock+0x34>)
     85a:	6911      	ldr	r1, [r2, #16]
     85c:	2380      	movs	r3, #128	; 0x80
     85e:	005b      	lsls	r3, r3, #1
     860:	430b      	orrs	r3, r1
     862:	6113      	str	r3, [r2, #16]
     864:	e7f7      	b.n	856 <_can_enable_peripheral_clock+0xe>
     866:	4a05      	ldr	r2, [pc, #20]	; (87c <_can_enable_peripheral_clock+0x34>)
     868:	6911      	ldr	r1, [r2, #16]
     86a:	2380      	movs	r3, #128	; 0x80
     86c:	009b      	lsls	r3, r3, #2
     86e:	430b      	orrs	r3, r1
     870:	6113      	str	r3, [r2, #16]
     872:	e7f0      	b.n	856 <_can_enable_peripheral_clock+0xe>
     874:	42001c00 	.word	0x42001c00
     878:	42002000 	.word	0x42002000
     87c:	40000800 	.word	0x40000800

00000880 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	000c      	movs	r4, r1
     884:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     886:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     888:	4ba5      	ldr	r3, [pc, #660]	; (b20 <can_init+0x2a0>)
     88a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     88c:	4ba5      	ldr	r3, [pc, #660]	; (b24 <can_init+0x2a4>)
     88e:	2200      	movs	r2, #0
     890:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     892:	782a      	ldrb	r2, [r5, #0]
     894:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     896:	4ba4      	ldr	r3, [pc, #656]	; (b28 <can_init+0x2a8>)
     898:	429c      	cmp	r4, r3
     89a:	d100      	bne.n	89e <can_init+0x1e>
     89c:	e0c6      	b.n	a2c <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     89e:	4ba3      	ldr	r3, [pc, #652]	; (b2c <can_init+0x2ac>)
     8a0:	429c      	cmp	r4, r3
     8a2:	d100      	bne.n	8a6 <can_init+0x26>
     8a4:	e0ff      	b.n	aa6 <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
     8a6:	69a3      	ldr	r3, [r4, #24]
     8a8:	2202      	movs	r2, #2
     8aa:	4313      	orrs	r3, r2
     8ac:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
     8ae:	2300      	movs	r3, #0
     8b0:	22bc      	movs	r2, #188	; 0xbc
     8b2:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
     8b4:	320c      	adds	r2, #12
     8b6:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
     8b8:	4b9d      	ldr	r3, [pc, #628]	; (b30 <can_init+0x2b0>)
     8ba:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
     8bc:	4b9d      	ldr	r3, [pc, #628]	; (b34 <can_init+0x2b4>)
     8be:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
     8c0:	7bab      	ldrb	r3, [r5, #14]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d004      	beq.n	8d0 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
     8c6:	68e2      	ldr	r2, [r4, #12]
     8c8:	2380      	movs	r3, #128	; 0x80
     8ca:	041b      	lsls	r3, r3, #16
     8cc:	4313      	orrs	r3, r2
     8ce:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
     8d0:	786b      	ldrb	r3, [r5, #1]
     8d2:	2b00      	cmp	r3, #0
     8d4:	d003      	beq.n	8de <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
     8d6:	68a3      	ldr	r3, [r4, #8]
     8d8:	2240      	movs	r2, #64	; 0x40
     8da:	4313      	orrs	r3, r2
     8dc:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
     8de:	6962      	ldr	r2, [r4, #20]
     8e0:	78ab      	ldrb	r3, [r5, #2]
     8e2:	4313      	orrs	r3, r2
     8e4:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
     8e6:	78eb      	ldrb	r3, [r5, #3]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d004      	beq.n	8f6 <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
     8ec:	69a2      	ldr	r2, [r4, #24]
     8ee:	2380      	movs	r3, #128	; 0x80
     8f0:	01db      	lsls	r3, r3, #7
     8f2:	4313      	orrs	r3, r2
     8f4:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
     8f6:	792b      	ldrb	r3, [r5, #4]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d004      	beq.n	906 <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
     8fc:	69a2      	ldr	r2, [r4, #24]
     8fe:	2380      	movs	r3, #128	; 0x80
     900:	019b      	lsls	r3, r3, #6
     902:	4313      	orrs	r3, r2
     904:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
     906:	796b      	ldrb	r3, [r5, #5]
     908:	2b00      	cmp	r3, #0
     90a:	d004      	beq.n	916 <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
     90c:	69a2      	ldr	r2, [r4, #24]
     90e:	2380      	movs	r3, #128	; 0x80
     910:	015b      	lsls	r3, r3, #5
     912:	4313      	orrs	r3, r2
     914:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
     916:	79ab      	ldrb	r3, [r5, #6]
     918:	2b00      	cmp	r3, #0
     91a:	d103      	bne.n	924 <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
     91c:	69a3      	ldr	r3, [r4, #24]
     91e:	2240      	movs	r2, #64	; 0x40
     920:	4313      	orrs	r3, r2
     922:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
     924:	79eb      	ldrb	r3, [r5, #7]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
     92a:	69a3      	ldr	r3, [r4, #24]
     92c:	2210      	movs	r2, #16
     92e:	4313      	orrs	r3, r2
     930:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
     932:	7a2b      	ldrb	r3, [r5, #8]
     934:	2b00      	cmp	r3, #0
     936:	d003      	beq.n	940 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
     938:	69a3      	ldr	r3, [r4, #24]
     93a:	2208      	movs	r2, #8
     93c:	4313      	orrs	r3, r2
     93e:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
     940:	7a6b      	ldrb	r3, [r5, #9]
     942:	041b      	lsls	r3, r3, #16
     944:	22f0      	movs	r2, #240	; 0xf0
     946:	0312      	lsls	r2, r2, #12
     948:	4013      	ands	r3, r2
     94a:	2201      	movs	r2, #1
     94c:	4313      	orrs	r3, r2
     94e:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
     950:	7b2b      	ldrb	r3, [r5, #12]
     952:	7b6a      	ldrb	r2, [r5, #13]
     954:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     956:	896a      	ldrh	r2, [r5, #10]
     958:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
     95a:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     95c:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     95e:	7beb      	ldrb	r3, [r5, #15]
     960:	021b      	lsls	r3, r3, #8
     962:	22fe      	movs	r2, #254	; 0xfe
     964:	01d2      	lsls	r2, r2, #7
     966:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
     968:	7c29      	ldrb	r1, [r5, #16]
     96a:	227f      	movs	r2, #127	; 0x7f
     96c:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     96e:	4313      	orrs	r3, r2
     970:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     972:	7c6a      	ldrb	r2, [r5, #17]
     974:	0112      	lsls	r2, r2, #4
     976:	2330      	movs	r3, #48	; 0x30
     978:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
     97a:	7ca9      	ldrb	r1, [r5, #18]
     97c:	0089      	lsls	r1, r1, #2
     97e:	220c      	movs	r2, #12
     980:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     982:	4313      	orrs	r3, r2
     984:	2280      	movs	r2, #128	; 0x80
     986:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
     988:	7ceb      	ldrb	r3, [r5, #19]
     98a:	2b00      	cmp	r3, #0
     98c:	d003      	beq.n	996 <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
     98e:	58a3      	ldr	r3, [r4, r2]
     990:	2102      	movs	r1, #2
     992:	430b      	orrs	r3, r1
     994:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
     996:	7d2b      	ldrb	r3, [r5, #20]
     998:	2b00      	cmp	r3, #0
     99a:	d004      	beq.n	9a6 <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	58a3      	ldr	r3, [r4, r2]
     9a0:	2101      	movs	r1, #1
     9a2:	430b      	orrs	r3, r1
     9a4:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
     9a6:	2390      	movs	r3, #144	; 0x90
     9a8:	69aa      	ldr	r2, [r5, #24]
     9aa:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
     9ac:	7f2b      	ldrb	r3, [r5, #28]
     9ae:	2b00      	cmp	r3, #0
     9b0:	d005      	beq.n	9be <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
     9b2:	22a0      	movs	r2, #160	; 0xa0
     9b4:	58a1      	ldr	r1, [r4, r2]
     9b6:	2380      	movs	r3, #128	; 0x80
     9b8:	061b      	lsls	r3, r3, #24
     9ba:	430b      	orrs	r3, r1
     9bc:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
     9be:	22a0      	movs	r2, #160	; 0xa0
     9c0:	58a1      	ldr	r1, [r4, r2]
     9c2:	7f6b      	ldrb	r3, [r5, #29]
     9c4:	061b      	lsls	r3, r3, #24
     9c6:	20fe      	movs	r0, #254	; 0xfe
     9c8:	05c0      	lsls	r0, r0, #23
     9ca:	4003      	ands	r3, r0
     9cc:	430b      	orrs	r3, r1
     9ce:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
     9d0:	7fab      	ldrb	r3, [r5, #30]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d005      	beq.n	9e2 <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
     9d6:	3210      	adds	r2, #16
     9d8:	58a1      	ldr	r1, [r4, r2]
     9da:	2380      	movs	r3, #128	; 0x80
     9dc:	061b      	lsls	r3, r3, #24
     9de:	430b      	orrs	r3, r1
     9e0:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
     9e2:	22b0      	movs	r2, #176	; 0xb0
     9e4:	58a1      	ldr	r1, [r4, r2]
     9e6:	7feb      	ldrb	r3, [r5, #31]
     9e8:	061b      	lsls	r3, r3, #24
     9ea:	20fe      	movs	r0, #254	; 0xfe
     9ec:	05c0      	lsls	r0, r0, #23
     9ee:	4003      	ands	r3, r0
     9f0:	430b      	orrs	r3, r1
     9f2:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
     9f4:	2320      	movs	r3, #32
     9f6:	5ceb      	ldrb	r3, [r5, r3]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d005      	beq.n	a08 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
     9fc:	3210      	adds	r2, #16
     9fe:	58a1      	ldr	r1, [r4, r2]
     a00:	2380      	movs	r3, #128	; 0x80
     a02:	05db      	lsls	r3, r3, #23
     a04:	430b      	orrs	r3, r1
     a06:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
     a08:	22f0      	movs	r2, #240	; 0xf0
     a0a:	58a1      	ldr	r1, [r4, r2]
     a0c:	2321      	movs	r3, #33	; 0x21
     a0e:	5ceb      	ldrb	r3, [r5, r3]
     a10:	061b      	lsls	r3, r3, #24
     a12:	20fc      	movs	r0, #252	; 0xfc
     a14:	0580      	lsls	r0, r0, #22
     a16:	4003      	ands	r3, r0
     a18:	430b      	orrs	r3, r1
     a1a:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
     a1c:	2303      	movs	r3, #3
     a1e:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
     a20:	3b04      	subs	r3, #4
     a22:	3a10      	subs	r2, #16
     a24:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
     a26:	3204      	adds	r2, #4
     a28:	50a3      	str	r3, [r4, r2]
}
     a2a:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     a2c:	493d      	ldr	r1, [pc, #244]	; (b24 <can_init+0x2a4>)
     a2e:	201a      	movs	r0, #26
     a30:	4b41      	ldr	r3, [pc, #260]	; (b38 <can_init+0x2b8>)
     a32:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
     a34:	201a      	movs	r0, #26
     a36:	4b41      	ldr	r3, [pc, #260]	; (b3c <can_init+0x2bc>)
     a38:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     a3a:	4b3b      	ldr	r3, [pc, #236]	; (b28 <can_init+0x2a8>)
     a3c:	699a      	ldr	r2, [r3, #24]
     a3e:	2102      	movs	r1, #2
     a40:	430a      	orrs	r2, r1
     a42:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
     a44:	4a3e      	ldr	r2, [pc, #248]	; (b40 <can_init+0x2c0>)
     a46:	0412      	lsls	r2, r2, #16
     a48:	0c12      	lsrs	r2, r2, #16
     a4a:	2180      	movs	r1, #128	; 0x80
     a4c:	0389      	lsls	r1, r1, #14
     a4e:	430a      	orrs	r2, r1
     a50:	2184      	movs	r1, #132	; 0x84
     a52:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
     a54:	4a3b      	ldr	r2, [pc, #236]	; (b44 <can_init+0x2c4>)
     a56:	0412      	lsls	r2, r2, #16
     a58:	0c12      	lsrs	r2, r2, #16
     a5a:	2180      	movs	r1, #128	; 0x80
     a5c:	0349      	lsls	r1, r1, #13
     a5e:	430a      	orrs	r2, r1
     a60:	2088      	movs	r0, #136	; 0x88
     a62:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
     a64:	4a38      	ldr	r2, [pc, #224]	; (b48 <can_init+0x2c8>)
     a66:	0412      	lsls	r2, r2, #16
     a68:	0c12      	lsrs	r2, r2, #16
     a6a:	430a      	orrs	r2, r1
     a6c:	3018      	adds	r0, #24
     a6e:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
     a70:	4a36      	ldr	r2, [pc, #216]	; (b4c <can_init+0x2cc>)
     a72:	0412      	lsls	r2, r2, #16
     a74:	0c12      	lsrs	r2, r2, #16
     a76:	4311      	orrs	r1, r2
     a78:	22b0      	movs	r2, #176	; 0xb0
     a7a:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
     a7c:	4a34      	ldr	r2, [pc, #208]	; (b50 <can_init+0x2d0>)
     a7e:	0412      	lsls	r2, r2, #16
     a80:	0c12      	lsrs	r2, r2, #16
     a82:	21ac      	movs	r1, #172	; 0xac
     a84:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     a86:	4a33      	ldr	r2, [pc, #204]	; (b54 <can_init+0x2d4>)
     a88:	0412      	lsls	r2, r2, #16
     a8a:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
     a8c:	4932      	ldr	r1, [pc, #200]	; (b58 <can_init+0x2d8>)
     a8e:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     a90:	21c0      	movs	r1, #192	; 0xc0
     a92:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
     a94:	4a31      	ldr	r2, [pc, #196]	; (b5c <can_init+0x2dc>)
     a96:	0412      	lsls	r2, r2, #16
     a98:	0c12      	lsrs	r2, r2, #16
     a9a:	2180      	movs	r1, #128	; 0x80
     a9c:	0309      	lsls	r1, r1, #12
     a9e:	430a      	orrs	r2, r1
     aa0:	21f0      	movs	r1, #240	; 0xf0
     aa2:	505a      	str	r2, [r3, r1]
     aa4:	e703      	b.n	8ae <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
     aa6:	491f      	ldr	r1, [pc, #124]	; (b24 <can_init+0x2a4>)
     aa8:	201b      	movs	r0, #27
     aaa:	4b23      	ldr	r3, [pc, #140]	; (b38 <can_init+0x2b8>)
     aac:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
     aae:	201b      	movs	r0, #27
     ab0:	4b22      	ldr	r3, [pc, #136]	; (b3c <can_init+0x2bc>)
     ab2:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     ab4:	4b1d      	ldr	r3, [pc, #116]	; (b2c <can_init+0x2ac>)
     ab6:	699a      	ldr	r2, [r3, #24]
     ab8:	2102      	movs	r1, #2
     aba:	430a      	orrs	r2, r1
     abc:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
     abe:	4a28      	ldr	r2, [pc, #160]	; (b60 <can_init+0x2e0>)
     ac0:	0412      	lsls	r2, r2, #16
     ac2:	0c12      	lsrs	r2, r2, #16
     ac4:	2180      	movs	r1, #128	; 0x80
     ac6:	0389      	lsls	r1, r1, #14
     ac8:	430a      	orrs	r2, r1
     aca:	2184      	movs	r1, #132	; 0x84
     acc:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
     ace:	4a25      	ldr	r2, [pc, #148]	; (b64 <can_init+0x2e4>)
     ad0:	0412      	lsls	r2, r2, #16
     ad2:	0c12      	lsrs	r2, r2, #16
     ad4:	2180      	movs	r1, #128	; 0x80
     ad6:	0349      	lsls	r1, r1, #13
     ad8:	430a      	orrs	r2, r1
     ada:	2088      	movs	r0, #136	; 0x88
     adc:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
     ade:	4a22      	ldr	r2, [pc, #136]	; (b68 <can_init+0x2e8>)
     ae0:	0412      	lsls	r2, r2, #16
     ae2:	0c12      	lsrs	r2, r2, #16
     ae4:	430a      	orrs	r2, r1
     ae6:	3018      	adds	r0, #24
     ae8:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
     aea:	4a20      	ldr	r2, [pc, #128]	; (b6c <can_init+0x2ec>)
     aec:	0412      	lsls	r2, r2, #16
     aee:	0c12      	lsrs	r2, r2, #16
     af0:	4311      	orrs	r1, r2
     af2:	22b0      	movs	r2, #176	; 0xb0
     af4:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
     af6:	4a1e      	ldr	r2, [pc, #120]	; (b70 <can_init+0x2f0>)
     af8:	0412      	lsls	r2, r2, #16
     afa:	0c12      	lsrs	r2, r2, #16
     afc:	21ac      	movs	r1, #172	; 0xac
     afe:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     b00:	4a1c      	ldr	r2, [pc, #112]	; (b74 <can_init+0x2f4>)
     b02:	0412      	lsls	r2, r2, #16
     b04:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
     b06:	4914      	ldr	r1, [pc, #80]	; (b58 <can_init+0x2d8>)
     b08:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     b0a:	21c0      	movs	r1, #192	; 0xc0
     b0c:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
     b0e:	4a1a      	ldr	r2, [pc, #104]	; (b78 <can_init+0x2f8>)
     b10:	0412      	lsls	r2, r2, #16
     b12:	0c12      	lsrs	r2, r2, #16
     b14:	2180      	movs	r1, #128	; 0x80
     b16:	0309      	lsls	r1, r1, #12
     b18:	430a      	orrs	r2, r1
     b1a:	21f0      	movs	r1, #240	; 0xf0
     b1c:	505a      	str	r2, [r3, r1]
     b1e:	e6c6      	b.n	8ae <can_init+0x2e>
     b20:	00000849 	.word	0x00000849
     b24:	200009e8 	.word	0x200009e8
     b28:	42001c00 	.word	0x42001c00
     b2c:	42002000 	.word	0x42002000
     b30:	06050a03 	.word	0x06050a03
     b34:	00050a33 	.word	0x00050a33
     b38:	00000e21 	.word	0x00000e21
     b3c:	00000db1 	.word	0x00000db1
     b40:	200003c4 	.word	0x200003c4
     b44:	20000144 	.word	0x20000144
     b48:	200001c4 	.word	0x200001c4
     b4c:	200002c4 	.word	0x200002c4
     b50:	20000044 	.word	0x20000044
     b54:	20000444 	.word	0x20000444
     b58:	04040000 	.word	0x04040000
     b5c:	200004c4 	.word	0x200004c4
     b60:	20000884 	.word	0x20000884
     b64:	20000604 	.word	0x20000604
     b68:	20000684 	.word	0x20000684
     b6c:	20000784 	.word	0x20000784
     b70:	20000504 	.word	0x20000504
     b74:	20000904 	.word	0x20000904
     b78:	20000984 	.word	0x20000984

00000b7c <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
     b7c:	6802      	ldr	r2, [r0, #0]
     b7e:	6993      	ldr	r3, [r2, #24]
     b80:	2101      	movs	r1, #1
     b82:	438b      	bics	r3, r1
     b84:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
     b86:	6801      	ldr	r1, [r0, #0]
     b88:	2201      	movs	r2, #1
     b8a:	698b      	ldr	r3, [r1, #24]
     b8c:	421a      	tst	r2, r3
     b8e:	d1fc      	bne.n	b8a <can_start+0xe>
}
     b90:	4770      	bx	lr
	...

00000b94 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     b94:	b570      	push	{r4, r5, r6, lr}
     b96:	b082      	sub	sp, #8
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     b98:	ac01      	add	r4, sp, #4
     b9a:	2500      	movs	r5, #0
     b9c:	70a5      	strb	r5, [r4, #2]
	 * specific board configuration, found in conf_board.h.
	 */
	struct port_config config;
	port_get_config_defaults(&config);
	
	config.direction = PORT_PIN_DIR_OUTPUT;
     b9e:	2601      	movs	r6, #1
     ba0:	7026      	strb	r6, [r4, #0]
	config.input_pull = PORT_PIN_PULL_NONE;
     ba2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(LED_USER_PIN, &config);
     ba4:	0021      	movs	r1, r4
     ba6:	201c      	movs	r0, #28
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <system_board_init+0x2c>)
     baa:	4798      	blx	r3
	
#if USE_PINSTRAPS
	config.direction = PORT_PIN_DIR_INPUT;
     bac:	7025      	strb	r5, [r4, #0]
	config.input_pull = PORT_PIN_PULL_UP;
     bae:	7066      	strb	r6, [r4, #1]
	port_group_set_config(&PORTA, PINSTRAPS, &config);
     bb0:	0022      	movs	r2, r4
     bb2:	4904      	ldr	r1, [pc, #16]	; (bc4 <system_board_init+0x30>)
     bb4:	2082      	movs	r0, #130	; 0x82
     bb6:	05c0      	lsls	r0, r0, #23
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <system_board_init+0x34>)
     bba:	4798      	blx	r3
#endif
     bbc:	b002      	add	sp, #8
     bbe:	bd70      	pop	{r4, r5, r6, pc}
     bc0:	000007c1 	.word	0x000007c1
     bc4:	08400003 	.word	0x08400003
     bc8:	000007e5 	.word	0x000007e5

00000bcc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     bcc:	4b0c      	ldr	r3, [pc, #48]	; (c00 <cpu_irq_enter_critical+0x34>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d106      	bne.n	be2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bd4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bd8:	2b00      	cmp	r3, #0
     bda:	d007      	beq.n	bec <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bdc:	2200      	movs	r2, #0
     bde:	4b09      	ldr	r3, [pc, #36]	; (c04 <cpu_irq_enter_critical+0x38>)
     be0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     be2:	4a07      	ldr	r2, [pc, #28]	; (c00 <cpu_irq_enter_critical+0x34>)
     be4:	6813      	ldr	r3, [r2, #0]
     be6:	3301      	adds	r3, #1
     be8:	6013      	str	r3, [r2, #0]
}
     bea:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     bec:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bee:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bf2:	2200      	movs	r2, #0
     bf4:	4b04      	ldr	r3, [pc, #16]	; (c08 <cpu_irq_enter_critical+0x3c>)
     bf6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bf8:	3201      	adds	r2, #1
     bfa:	4b02      	ldr	r3, [pc, #8]	; (c04 <cpu_irq_enter_critical+0x38>)
     bfc:	701a      	strb	r2, [r3, #0]
     bfe:	e7f0      	b.n	be2 <cpu_irq_enter_critical+0x16>
     c00:	200009c4 	.word	0x200009c4
     c04:	200009c8 	.word	0x200009c8
     c08:	20000000 	.word	0x20000000

00000c0c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c0c:	4b08      	ldr	r3, [pc, #32]	; (c30 <cpu_irq_leave_critical+0x24>)
     c0e:	681a      	ldr	r2, [r3, #0]
     c10:	3a01      	subs	r2, #1
     c12:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d109      	bne.n	c2e <cpu_irq_leave_critical+0x22>
     c1a:	4b06      	ldr	r3, [pc, #24]	; (c34 <cpu_irq_leave_critical+0x28>)
     c1c:	781b      	ldrb	r3, [r3, #0]
     c1e:	2b00      	cmp	r3, #0
     c20:	d005      	beq.n	c2e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c22:	2201      	movs	r2, #1
     c24:	4b04      	ldr	r3, [pc, #16]	; (c38 <cpu_irq_leave_critical+0x2c>)
     c26:	701a      	strb	r2, [r3, #0]
     c28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c2c:	b662      	cpsie	i
	}
}
     c2e:	4770      	bx	lr
     c30:	200009c4 	.word	0x200009c4
     c34:	200009c8 	.word	0x200009c8
     c38:	20000000 	.word	0x20000000

00000c3c <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
     c3c:	b500      	push	{lr}
     c3e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
     c40:	2203      	movs	r2, #3
     c42:	4b10      	ldr	r3, [pc, #64]	; (c84 <system_clock_init+0x48>)
     c44:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c46:	4a10      	ldr	r2, [pc, #64]	; (c88 <system_clock_init+0x4c>)
     c48:	6853      	ldr	r3, [r2, #4]
     c4a:	211e      	movs	r1, #30
     c4c:	438b      	bics	r3, r1
     c4e:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
     c50:	4a0e      	ldr	r2, [pc, #56]	; (c8c <system_clock_init+0x50>)
     c52:	7d13      	ldrb	r3, [r2, #20]
     c54:	3162      	adds	r1, #98	; 0x62
     c56:	430b      	orrs	r3, r1
     c58:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     c5a:	4b0d      	ldr	r3, [pc, #52]	; (c90 <system_clock_init+0x54>)
     c5c:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     c5e:	2301      	movs	r3, #1
     c60:	4a0c      	ldr	r2, [pc, #48]	; (c94 <system_clock_init+0x58>)
     c62:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
     c64:	a901      	add	r1, sp, #4
     c66:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     c68:	2300      	movs	r3, #0
     c6a:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
     c6c:	2206      	movs	r2, #6
     c6e:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
     c70:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     c72:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     c74:	2000      	movs	r0, #0
     c76:	4b08      	ldr	r3, [pc, #32]	; (c98 <system_clock_init+0x5c>)
     c78:	4798      	blx	r3
     c7a:	2000      	movs	r0, #0
     c7c:	4b07      	ldr	r3, [pc, #28]	; (c9c <system_clock_init+0x60>)
     c7e:	4798      	blx	r3
#endif

}
     c80:	b005      	add	sp, #20
     c82:	bd00      	pop	{pc}
     c84:	40001800 	.word	0x40001800
     c88:	41004000 	.word	0x41004000
     c8c:	40001000 	.word	0x40001000
     c90:	00000ca1 	.word	0x00000ca1
     c94:	40000800 	.word	0x40000800
     c98:	00000cc5 	.word	0x00000cc5
     c9c:	00000d71 	.word	0x00000d71

00000ca0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     ca0:	4a06      	ldr	r2, [pc, #24]	; (cbc <system_gclk_init+0x1c>)
     ca2:	6953      	ldr	r3, [r2, #20]
     ca4:	2180      	movs	r1, #128	; 0x80
     ca6:	430b      	orrs	r3, r1
     ca8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     caa:	2201      	movs	r2, #1
     cac:	4b04      	ldr	r3, [pc, #16]	; (cc0 <system_gclk_init+0x20>)
     cae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     cb0:	0019      	movs	r1, r3
     cb2:	780b      	ldrb	r3, [r1, #0]
     cb4:	4213      	tst	r3, r2
     cb6:	d1fc      	bne.n	cb2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     cb8:	4770      	bx	lr
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	40000800 	.word	0x40000800
     cc0:	40001c00 	.word	0x40001c00

00000cc4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     cc4:	b570      	push	{r4, r5, r6, lr}
     cc6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     cc8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     cca:	784b      	ldrb	r3, [r1, #1]
     ccc:	2b00      	cmp	r3, #0
     cce:	d002      	beq.n	cd6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     cd0:	2380      	movs	r3, #128	; 0x80
     cd2:	00db      	lsls	r3, r3, #3
     cd4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     cd6:	7a4b      	ldrb	r3, [r1, #9]
     cd8:	2b00      	cmp	r3, #0
     cda:	d002      	beq.n	ce2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     cdc:	2380      	movs	r3, #128	; 0x80
     cde:	011b      	lsls	r3, r3, #4
     ce0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ce2:	6848      	ldr	r0, [r1, #4]
     ce4:	2801      	cmp	r0, #1
     ce6:	d90f      	bls.n	d08 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ce8:	1e43      	subs	r3, r0, #1
     cea:	4218      	tst	r0, r3
     cec:	d131      	bne.n	d52 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     cee:	2802      	cmp	r0, #2
     cf0:	d92d      	bls.n	d4e <system_gclk_gen_set_config+0x8a>
     cf2:	2302      	movs	r3, #2
     cf4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     cf6:	3201      	adds	r2, #1
						mask <<= 1) {
     cf8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     cfa:	4298      	cmp	r0, r3
     cfc:	d8fb      	bhi.n	cf6 <system_gclk_gen_set_config+0x32>
     cfe:	2380      	movs	r3, #128	; 0x80
     d00:	015b      	lsls	r3, r3, #5
     d02:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     d04:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     d06:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     d08:	7a0b      	ldrb	r3, [r1, #8]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d002      	beq.n	d14 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	019b      	lsls	r3, r3, #6
     d12:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d14:	2604      	movs	r6, #4
     d16:	40a6      	lsls	r6, r4
     d18:	4911      	ldr	r1, [pc, #68]	; (d60 <system_gclk_gen_set_config+0x9c>)
     d1a:	4a12      	ldr	r2, [pc, #72]	; (d64 <system_gclk_gen_set_config+0xa0>)
     d1c:	684b      	ldr	r3, [r1, #4]
     d1e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     d20:	421e      	tst	r6, r3
     d22:	d1fb      	bne.n	d1c <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d24:	4b10      	ldr	r3, [pc, #64]	; (d68 <system_gclk_gen_set_config+0xa4>)
     d26:	4798      	blx	r3
     d28:	00a4      	lsls	r4, r4, #2
     d2a:	4b0d      	ldr	r3, [pc, #52]	; (d60 <system_gclk_gen_set_config+0x9c>)
     d2c:	469c      	mov	ip, r3
     d2e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     d30:	6a22      	ldr	r2, [r4, #32]
     d32:	2380      	movs	r3, #128	; 0x80
     d34:	005b      	lsls	r3, r3, #1
     d36:	401a      	ands	r2, r3
     d38:	432a      	orrs	r2, r5
     d3a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d3c:	4661      	mov	r1, ip
     d3e:	4a09      	ldr	r2, [pc, #36]	; (d64 <system_gclk_gen_set_config+0xa0>)
     d40:	684b      	ldr	r3, [r1, #4]
     d42:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     d44:	421e      	tst	r6, r3
     d46:	d1fb      	bne.n	d40 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <system_gclk_gen_set_config+0xa8>)
     d4a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     d4c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     d4e:	2200      	movs	r2, #0
     d50:	e7d5      	b.n	cfe <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     d52:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     d54:	2380      	movs	r3, #128	; 0x80
     d56:	009b      	lsls	r3, r3, #2
     d58:	4318      	orrs	r0, r3
     d5a:	4305      	orrs	r5, r0
     d5c:	e7d4      	b.n	d08 <system_gclk_gen_set_config+0x44>
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	40001c00 	.word	0x40001c00
     d64:	000007fc 	.word	0x000007fc
     d68:	00000bcd 	.word	0x00000bcd
     d6c:	00000c0d 	.word	0x00000c0d

00000d70 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     d70:	b510      	push	{r4, lr}
     d72:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d74:	2204      	movs	r2, #4
     d76:	4082      	lsls	r2, r0
     d78:	4809      	ldr	r0, [pc, #36]	; (da0 <system_gclk_gen_enable+0x30>)
     d7a:	490a      	ldr	r1, [pc, #40]	; (da4 <system_gclk_gen_enable+0x34>)
     d7c:	6843      	ldr	r3, [r0, #4]
     d7e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     d80:	421a      	tst	r2, r3
     d82:	d1fb      	bne.n	d7c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     d84:	4b08      	ldr	r3, [pc, #32]	; (da8 <system_gclk_gen_enable+0x38>)
     d86:	4798      	blx	r3
     d88:	00a4      	lsls	r4, r4, #2
     d8a:	4b05      	ldr	r3, [pc, #20]	; (da0 <system_gclk_gen_enable+0x30>)
     d8c:	469c      	mov	ip, r3
     d8e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     d90:	6a22      	ldr	r2, [r4, #32]
     d92:	2380      	movs	r3, #128	; 0x80
     d94:	005b      	lsls	r3, r3, #1
     d96:	4313      	orrs	r3, r2
     d98:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     d9a:	4b04      	ldr	r3, [pc, #16]	; (dac <system_gclk_gen_enable+0x3c>)
     d9c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d9e:	bd10      	pop	{r4, pc}
     da0:	40001c00 	.word	0x40001c00
     da4:	000007fc 	.word	0x000007fc
     da8:	00000bcd 	.word	0x00000bcd
     dac:	00000c0d 	.word	0x00000c0d

00000db0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     db0:	b510      	push	{r4, lr}
     db2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     db4:	4b09      	ldr	r3, [pc, #36]	; (ddc <system_gclk_chan_enable+0x2c>)
     db6:	4798      	blx	r3
     db8:	00a0      	lsls	r0, r4, #2
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <system_gclk_chan_enable+0x30>)
     dbc:	469c      	mov	ip, r3
     dbe:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     dc0:	2280      	movs	r2, #128	; 0x80
     dc2:	5883      	ldr	r3, [r0, r2]
     dc4:	2140      	movs	r1, #64	; 0x40
     dc6:	430b      	orrs	r3, r1
     dc8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     dca:	3140      	adds	r1, #64	; 0x40
     dcc:	3a40      	subs	r2, #64	; 0x40
     dce:	5843      	ldr	r3, [r0, r1]
     dd0:	421a      	tst	r2, r3
     dd2:	d0fc      	beq.n	dce <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     dd4:	4b03      	ldr	r3, [pc, #12]	; (de4 <system_gclk_chan_enable+0x34>)
     dd6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     dd8:	bd10      	pop	{r4, pc}
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	00000bcd 	.word	0x00000bcd
     de0:	40001c00 	.word	0x40001c00
     de4:	00000c0d 	.word	0x00000c0d

00000de8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     de8:	b510      	push	{r4, lr}
     dea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     dec:	4b09      	ldr	r3, [pc, #36]	; (e14 <system_gclk_chan_disable+0x2c>)
     dee:	4798      	blx	r3
     df0:	00a0      	lsls	r0, r4, #2
     df2:	4b09      	ldr	r3, [pc, #36]	; (e18 <system_gclk_chan_disable+0x30>)
     df4:	469c      	mov	ip, r3
     df6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     df8:	2280      	movs	r2, #128	; 0x80
     dfa:	5883      	ldr	r3, [r0, r2]
     dfc:	2140      	movs	r1, #64	; 0x40
     dfe:	438b      	bics	r3, r1
     e00:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     e02:	3140      	adds	r1, #64	; 0x40
     e04:	3a40      	subs	r2, #64	; 0x40
     e06:	5843      	ldr	r3, [r0, r1]
     e08:	421a      	tst	r2, r3
     e0a:	d1fc      	bne.n	e06 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     e0c:	4b03      	ldr	r3, [pc, #12]	; (e1c <system_gclk_chan_disable+0x34>)
     e0e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     e10:	bd10      	pop	{r4, pc}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	00000bcd 	.word	0x00000bcd
     e18:	40001c00 	.word	0x40001c00
     e1c:	00000c0d 	.word	0x00000c0d

00000e20 <system_gclk_chan_set_config>:
{
     e20:	b570      	push	{r4, r5, r6, lr}
     e22:	0004      	movs	r4, r0
     e24:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     e26:	4b05      	ldr	r3, [pc, #20]	; (e3c <system_gclk_chan_set_config+0x1c>)
     e28:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     e2a:	782a      	ldrb	r2, [r5, #0]
     e2c:	230f      	movs	r3, #15
     e2e:	4013      	ands	r3, r2
     e30:	3420      	adds	r4, #32
     e32:	00a4      	lsls	r4, r4, #2
     e34:	4a02      	ldr	r2, [pc, #8]	; (e40 <system_gclk_chan_set_config+0x20>)
     e36:	50a3      	str	r3, [r4, r2]
}
     e38:	bd70      	pop	{r4, r5, r6, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	00000de9 	.word	0x00000de9
     e40:	40001c00 	.word	0x40001c00

00000e44 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     e44:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     e46:	78d3      	ldrb	r3, [r2, #3]
     e48:	2b00      	cmp	r3, #0
     e4a:	d135      	bne.n	eb8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     e4c:	7813      	ldrb	r3, [r2, #0]
     e4e:	2b80      	cmp	r3, #128	; 0x80
     e50:	d029      	beq.n	ea6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     e52:	061b      	lsls	r3, r3, #24
     e54:	2480      	movs	r4, #128	; 0x80
     e56:	0264      	lsls	r4, r4, #9
     e58:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     e5a:	7854      	ldrb	r4, [r2, #1]
     e5c:	2502      	movs	r5, #2
     e5e:	43ac      	bics	r4, r5
     e60:	d106      	bne.n	e70 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     e62:	7894      	ldrb	r4, [r2, #2]
     e64:	2c00      	cmp	r4, #0
     e66:	d120      	bne.n	eaa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     e68:	2480      	movs	r4, #128	; 0x80
     e6a:	02a4      	lsls	r4, r4, #10
     e6c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     e6e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e70:	7854      	ldrb	r4, [r2, #1]
     e72:	3c01      	subs	r4, #1
     e74:	2c01      	cmp	r4, #1
     e76:	d91c      	bls.n	eb2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e78:	040d      	lsls	r5, r1, #16
     e7a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e7c:	24a0      	movs	r4, #160	; 0xa0
     e7e:	05e4      	lsls	r4, r4, #23
     e80:	432c      	orrs	r4, r5
     e82:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e84:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e86:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e88:	24d0      	movs	r4, #208	; 0xd0
     e8a:	0624      	lsls	r4, r4, #24
     e8c:	432c      	orrs	r4, r5
     e8e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e90:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     e92:	78d4      	ldrb	r4, [r2, #3]
     e94:	2c00      	cmp	r4, #0
     e96:	d122      	bne.n	ede <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     e98:	035b      	lsls	r3, r3, #13
     e9a:	d51c      	bpl.n	ed6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     e9c:	7893      	ldrb	r3, [r2, #2]
     e9e:	2b01      	cmp	r3, #1
     ea0:	d01e      	beq.n	ee0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     ea2:	6141      	str	r1, [r0, #20]
     ea4:	e017      	b.n	ed6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     ea6:	2300      	movs	r3, #0
     ea8:	e7d7      	b.n	e5a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     eaa:	24c0      	movs	r4, #192	; 0xc0
     eac:	02e4      	lsls	r4, r4, #11
     eae:	4323      	orrs	r3, r4
     eb0:	e7dd      	b.n	e6e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     eb2:	4c0d      	ldr	r4, [pc, #52]	; (ee8 <_system_pinmux_config+0xa4>)
     eb4:	4023      	ands	r3, r4
     eb6:	e7df      	b.n	e78 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     eb8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     eba:	040c      	lsls	r4, r1, #16
     ebc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     ebe:	23a0      	movs	r3, #160	; 0xa0
     ec0:	05db      	lsls	r3, r3, #23
     ec2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     ec4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     ec6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     ec8:	23d0      	movs	r3, #208	; 0xd0
     eca:	061b      	lsls	r3, r3, #24
     ecc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     ece:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     ed0:	78d3      	ldrb	r3, [r2, #3]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d103      	bne.n	ede <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ed6:	7853      	ldrb	r3, [r2, #1]
     ed8:	3b01      	subs	r3, #1
     eda:	2b01      	cmp	r3, #1
     edc:	d902      	bls.n	ee4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     ede:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     ee0:	6181      	str	r1, [r0, #24]
     ee2:	e7f8      	b.n	ed6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     ee4:	6081      	str	r1, [r0, #8]
}
     ee6:	e7fa      	b.n	ede <_system_pinmux_config+0x9a>
     ee8:	fffbffff 	.word	0xfffbffff

00000eec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     eec:	b510      	push	{r4, lr}
     eee:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ef0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ef2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ef4:	2900      	cmp	r1, #0
     ef6:	d105      	bne.n	f04 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
     ef8:	0943      	lsrs	r3, r0, #5
     efa:	01db      	lsls	r3, r3, #7
     efc:	2182      	movs	r1, #130	; 0x82
     efe:	05c9      	lsls	r1, r1, #23
     f00:	468c      	mov	ip, r1
     f02:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     f04:	241f      	movs	r4, #31
     f06:	4020      	ands	r0, r4
     f08:	2101      	movs	r1, #1
     f0a:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     f0c:	0018      	movs	r0, r3
     f0e:	4b01      	ldr	r3, [pc, #4]	; (f14 <system_pinmux_pin_set_config+0x28>)
     f10:	4798      	blx	r3
}
     f12:	bd10      	pop	{r4, pc}
     f14:	00000e45 	.word	0x00000e45

00000f18 <system_pinmux_group_set_config>:
 */
void system_pinmux_group_set_config(
		PortGroup *const port,
		const uint32_t mask,
		const struct system_pinmux_config *const config)
{
     f18:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1a:	b083      	sub	sp, #12
     f1c:	9000      	str	r0, [sp, #0]
     f1e:	000e      	movs	r6, r1
     f20:	9201      	str	r2, [sp, #4]
	Assert(port);

	for (int i = 0; i < 32; i++) {
     f22:	2400      	movs	r4, #0
		if (mask & (1UL << i)) {
     f24:	2701      	movs	r7, #1
			_system_pinmux_config(port, (1UL << i), config);
     f26:	4d08      	ldr	r5, [pc, #32]	; (f48 <system_pinmux_group_set_config+0x30>)
     f28:	e002      	b.n	f30 <system_pinmux_group_set_config+0x18>
	for (int i = 0; i < 32; i++) {
     f2a:	3401      	adds	r4, #1
     f2c:	2c20      	cmp	r4, #32
     f2e:	d009      	beq.n	f44 <system_pinmux_group_set_config+0x2c>
		if (mask & (1UL << i)) {
     f30:	0033      	movs	r3, r6
     f32:	40e3      	lsrs	r3, r4
     f34:	421f      	tst	r7, r3
     f36:	d0f8      	beq.n	f2a <system_pinmux_group_set_config+0x12>
			_system_pinmux_config(port, (1UL << i), config);
     f38:	9a01      	ldr	r2, [sp, #4]
     f3a:	0039      	movs	r1, r7
     f3c:	40a1      	lsls	r1, r4
     f3e:	9800      	ldr	r0, [sp, #0]
     f40:	47a8      	blx	r5
     f42:	e7f2      	b.n	f2a <system_pinmux_group_set_config+0x12>
		}
	}
}
     f44:	b003      	add	sp, #12
     f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f48:	00000e45 	.word	0x00000e45

00000f4c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     f4c:	4770      	bx	lr
	...

00000f50 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     f50:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     f52:	4b05      	ldr	r3, [pc, #20]	; (f68 <system_init+0x18>)
     f54:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     f56:	4b05      	ldr	r3, [pc, #20]	; (f6c <system_init+0x1c>)
     f58:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     f5a:	4b05      	ldr	r3, [pc, #20]	; (f70 <system_init+0x20>)
     f5c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     f5e:	4b05      	ldr	r3, [pc, #20]	; (f74 <system_init+0x24>)
     f60:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     f62:	4b05      	ldr	r3, [pc, #20]	; (f78 <system_init+0x28>)
     f64:	4798      	blx	r3
}
     f66:	bd10      	pop	{r4, pc}
     f68:	00000c3d 	.word	0x00000c3d
     f6c:	00000b95 	.word	0x00000b95
     f70:	00000f4d 	.word	0x00000f4d
     f74:	00000f4d 	.word	0x00000f4d
     f78:	00000f4d 	.word	0x00000f4d

00000f7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     f7c:	e7fe      	b.n	f7c <Dummy_Handler>
	...

00000f80 <Reset_Handler>:
{
     f80:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     f82:	4a17      	ldr	r2, [pc, #92]	; (fe0 <Reset_Handler+0x60>)
     f84:	4b17      	ldr	r3, [pc, #92]	; (fe4 <Reset_Handler+0x64>)
     f86:	429a      	cmp	r2, r3
     f88:	d011      	beq.n	fae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     f8a:	001a      	movs	r2, r3
     f8c:	4b16      	ldr	r3, [pc, #88]	; (fe8 <Reset_Handler+0x68>)
     f8e:	429a      	cmp	r2, r3
     f90:	d20d      	bcs.n	fae <Reset_Handler+0x2e>
     f92:	4a16      	ldr	r2, [pc, #88]	; (fec <Reset_Handler+0x6c>)
     f94:	3303      	adds	r3, #3
     f96:	1a9b      	subs	r3, r3, r2
     f98:	089b      	lsrs	r3, r3, #2
     f9a:	3301      	adds	r3, #1
     f9c:	009b      	lsls	r3, r3, #2
     f9e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     fa0:	4810      	ldr	r0, [pc, #64]	; (fe4 <Reset_Handler+0x64>)
     fa2:	490f      	ldr	r1, [pc, #60]	; (fe0 <Reset_Handler+0x60>)
     fa4:	588c      	ldr	r4, [r1, r2]
     fa6:	5084      	str	r4, [r0, r2]
     fa8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     faa:	429a      	cmp	r2, r3
     fac:	d1fa      	bne.n	fa4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     fae:	4a10      	ldr	r2, [pc, #64]	; (ff0 <Reset_Handler+0x70>)
     fb0:	4b10      	ldr	r3, [pc, #64]	; (ff4 <Reset_Handler+0x74>)
     fb2:	429a      	cmp	r2, r3
     fb4:	d20a      	bcs.n	fcc <Reset_Handler+0x4c>
     fb6:	43d3      	mvns	r3, r2
     fb8:	490e      	ldr	r1, [pc, #56]	; (ff4 <Reset_Handler+0x74>)
     fba:	185b      	adds	r3, r3, r1
     fbc:	2103      	movs	r1, #3
     fbe:	438b      	bics	r3, r1
     fc0:	3304      	adds	r3, #4
     fc2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     fc4:	2100      	movs	r1, #0
     fc6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     fc8:	4293      	cmp	r3, r2
     fca:	d1fc      	bne.n	fc6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     fcc:	4a0a      	ldr	r2, [pc, #40]	; (ff8 <Reset_Handler+0x78>)
     fce:	21ff      	movs	r1, #255	; 0xff
     fd0:	4b0a      	ldr	r3, [pc, #40]	; (ffc <Reset_Handler+0x7c>)
     fd2:	438b      	bics	r3, r1
     fd4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     fd6:	4b0a      	ldr	r3, [pc, #40]	; (1000 <Reset_Handler+0x80>)
     fd8:	4798      	blx	r3
        main();
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <Reset_Handler+0x84>)
     fdc:	4798      	blx	r3
     fde:	e7fe      	b.n	fde <Reset_Handler+0x5e>
     fe0:	00001588 	.word	0x00001588
     fe4:	20000000 	.word	0x20000000
     fe8:	20000018 	.word	0x20000018
     fec:	20000004 	.word	0x20000004
     ff0:	20000018 	.word	0x20000018
     ff4:	20000a54 	.word	0x20000a54
     ff8:	e000ed00 	.word	0xe000ed00
     ffc:	00000000 	.word	0x00000000
    1000:	000013bd 	.word	0x000013bd
    1004:	000012d1 	.word	0x000012d1

00001008 <adc_callback>:
	| CAN_PROTOCOL_ERROR_DATA);
}

// Callback functions

void adc_callback(struct adc_module *const module) {
    1008:	b510      	push	{r4, lr}
	// Average all samples and store value in channel's buffer
	adc_channel_vals[adc_channel_index] = 0;
    100a:	4b1a      	ldr	r3, [pc, #104]	; (1074 <adc_callback+0x6c>)
    100c:	7819      	ldrb	r1, [r3, #0]
	for(int i = 0; i < ADC_NUM_SAMPLES; i++) {
		adc_channel_vals[adc_channel_index] += adc_sample_buffer[i];	
	}
	adc_channel_vals[adc_channel_index] >>= ADC_SAMPLE_DIV;
    100e:	0048      	lsls	r0, r1, #1
		adc_channel_vals[adc_channel_index] += adc_sample_buffer[i];	
    1010:	4a19      	ldr	r2, [pc, #100]	; (1078 <adc_callback+0x70>)
    1012:	8813      	ldrh	r3, [r2, #0]
    1014:	8854      	ldrh	r4, [r2, #2]
    1016:	191b      	adds	r3, r3, r4
    1018:	8894      	ldrh	r4, [r2, #4]
    101a:	191b      	adds	r3, r3, r4
    101c:	88d2      	ldrh	r2, [r2, #6]
    101e:	189b      	adds	r3, r3, r2
	adc_channel_vals[adc_channel_index] >>= ADC_SAMPLE_DIV;
    1020:	b29b      	uxth	r3, r3
    1022:	089b      	lsrs	r3, r3, #2
    1024:	4a15      	ldr	r2, [pc, #84]	; (107c <adc_callback+0x74>)
    1026:	5283      	strh	r3, [r0, r2]
	
	// If there are still more channels to process, then set up next channel and start the sampling
	if(adc_channel_index < board_config.adc_channels - 1) {
    1028:	4b15      	ldr	r3, [pc, #84]	; (1080 <adc_callback+0x78>)
    102a:	785b      	ldrb	r3, [r3, #1]
    102c:	3b01      	subs	r3, #1
    102e:	4299      	cmp	r1, r3
    1030:	db03      	blt.n	103a <adc_callback+0x32>
		++adc_channel_index;
		adc_set_positive_input(&adc_instance, adc_channel[adc_channel_index]);
		adc_read_buffer_job(&adc_instance, adc_sample_buffer, ADC_NUM_SAMPLES);
		
	} else {
		adc_section_done = true;
    1032:	2201      	movs	r2, #1
    1034:	4b13      	ldr	r3, [pc, #76]	; (1084 <adc_callback+0x7c>)
    1036:	701a      	strb	r2, [r3, #0]
	}
}
    1038:	bd10      	pop	{r4, pc}
		++adc_channel_index;
    103a:	3101      	adds	r1, #1
    103c:	b2c9      	uxtb	r1, r1
    103e:	4b0d      	ldr	r3, [pc, #52]	; (1074 <adc_callback+0x6c>)
    1040:	7019      	strb	r1, [r3, #0]
		adc_set_positive_input(&adc_instance, adc_channel[adc_channel_index]);
    1042:	0089      	lsls	r1, r1, #2
    1044:	4b10      	ldr	r3, [pc, #64]	; (1088 <adc_callback+0x80>)
    1046:	5c59      	ldrb	r1, [r3, r1]
	Adc *const adc_module = module_inst->hw;
    1048:	4b10      	ldr	r3, [pc, #64]	; (108c <adc_callback+0x84>)
    104a:	681a      	ldr	r2, [r3, #0]
    104c:	8c13      	ldrh	r3, [r2, #32]
    104e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1050:	2b00      	cmp	r3, #0
    1052:	d1fb      	bne.n	104c <adc_callback+0x44>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1054:	8913      	ldrh	r3, [r2, #8]
    1056:	201f      	movs	r0, #31
    1058:	4383      	bics	r3, r0
    105a:	430b      	orrs	r3, r1
	adc_module->INPUTCTRL.reg =
    105c:	8113      	strh	r3, [r2, #8]
    105e:	8c13      	ldrh	r3, [r2, #32]
    1060:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1062:	2b00      	cmp	r3, #0
    1064:	d1fb      	bne.n	105e <adc_callback+0x56>
		adc_read_buffer_job(&adc_instance, adc_sample_buffer, ADC_NUM_SAMPLES);
    1066:	2204      	movs	r2, #4
    1068:	4903      	ldr	r1, [pc, #12]	; (1078 <adc_callback+0x70>)
    106a:	4808      	ldr	r0, [pc, #32]	; (108c <adc_callback+0x84>)
    106c:	4b08      	ldr	r3, [pc, #32]	; (1090 <adc_callback+0x88>)
    106e:	4798      	blx	r3
    1070:	e7e2      	b.n	1038 <adc_callback+0x30>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	200009c9 	.word	0x200009c9
    1078:	200009d4 	.word	0x200009d4
    107c:	200009cc 	.word	0x200009cc
    1080:	200009f0 	.word	0x200009f0
    1084:	200009dc 	.word	0x200009dc
    1088:	20000004 	.word	0x20000004
    108c:	20000a34 	.word	0x20000a34
    1090:	00000775 	.word	0x00000775

00001094 <get_pinstrap_id>:
	if(id == 255) {
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <get_pinstrap_id+0x2c>)
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2bff      	cmp	r3, #255	; 0xff
    109a:	d002      	beq.n	10a2 <get_pinstrap_id+0xe>
	return id;
    109c:	4b08      	ldr	r3, [pc, #32]	; (10c0 <get_pinstrap_id+0x2c>)
    109e:	7818      	ldrb	r0, [r3, #0]
}
    10a0:	4770      	bx	lr
	return (port->IN.reg & mask);
    10a2:	2382      	movs	r3, #130	; 0x82
    10a4:	05db      	lsls	r3, r3, #23
    10a6:	6a1a      	ldr	r2, [r3, #32]
    10a8:	2303      	movs	r3, #3
		id = (input & PINSTRAP_0) | ((input & PINSTRAP_1) << 1) | ((input & PINSTRAP_2) << 2) | ((input & PINSTRAP_3) << 3);
    10aa:	401a      	ands	r2, r3
    10ac:	0051      	lsls	r1, r2, #1
    10ae:	3301      	adds	r3, #1
    10b0:	400b      	ands	r3, r1
    10b2:	2101      	movs	r1, #1
    10b4:	400a      	ands	r2, r1
    10b6:	4313      	orrs	r3, r2
    10b8:	4a01      	ldr	r2, [pc, #4]	; (10c0 <get_pinstrap_id+0x2c>)
    10ba:	7013      	strb	r3, [r2, #0]
    10bc:	e7ee      	b.n	109c <get_pinstrap_id+0x8>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	20000016 	.word	0x20000016

000010c4 <configure_adc>:
void configure_adc(void) {
    10c4:	b530      	push	{r4, r5, lr}
    10c6:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&config);
    10c8:	ac01      	add	r4, sp, #4
    10ca:	0020      	movs	r0, r4
    10cc:	4b1b      	ldr	r3, [pc, #108]	; (113c <configure_adc+0x78>)
    10ce:	4798      	blx	r3
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    10d0:	2302      	movs	r3, #2
    10d2:	70a3      	strb	r3, [r4, #2]
	config.reference       = ADC_REFERENCE_INTVCC2;
    10d4:	3303      	adds	r3, #3
    10d6:	7063      	strb	r3, [r4, #1]
	config.positive_input  = ADC_POSITIVE_INPUT_PIN5;
    10d8:	7123      	strb	r3, [r4, #4]
	config.resolution      = ADC_RESOLUTION_10BIT;
    10da:	331b      	adds	r3, #27
    10dc:	70e3      	strb	r3, [r4, #3]
	adc_init(&adc_instance, ADC0, &config);
    10de:	4d18      	ldr	r5, [pc, #96]	; (1140 <configure_adc+0x7c>)
    10e0:	0022      	movs	r2, r4
    10e2:	4918      	ldr	r1, [pc, #96]	; (1144 <configure_adc+0x80>)
    10e4:	0028      	movs	r0, r5
    10e6:	4b18      	ldr	r3, [pc, #96]	; (1148 <configure_adc+0x84>)
    10e8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    10ea:	682c      	ldr	r4, [r5, #0]
    10ec:	8c23      	ldrh	r3, [r4, #32]
    10ee:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    10f0:	2b00      	cmp	r3, #0
    10f2:	d1fb      	bne.n	10ec <configure_adc+0x28>
			_adc_get_inst_index(adc_module)));
    10f4:	0020      	movs	r0, r4
    10f6:	4b15      	ldr	r3, [pc, #84]	; (114c <configure_adc+0x88>)
    10f8:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    10fa:	4b15      	ldr	r3, [pc, #84]	; (1150 <configure_adc+0x8c>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10fc:	5c1b      	ldrb	r3, [r3, r0]
    10fe:	221f      	movs	r2, #31
    1100:	401a      	ands	r2, r3
    1102:	2301      	movs	r3, #1
    1104:	4093      	lsls	r3, r2
    1106:	4a13      	ldr	r2, [pc, #76]	; (1154 <configure_adc+0x90>)
    1108:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    110a:	2307      	movs	r3, #7
    110c:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    110e:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1110:	7823      	ldrb	r3, [r4, #0]
    1112:	2202      	movs	r2, #2
    1114:	4313      	orrs	r3, r2
    1116:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
    1118:	4b09      	ldr	r3, [pc, #36]	; (1140 <configure_adc+0x7c>)
    111a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    111c:	8c13      	ldrh	r3, [r2, #32]
    111e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1120:	2b00      	cmp	r3, #0
    1122:	d1fb      	bne.n	111c <configure_adc+0x58>
	adc_register_callback(&adc_instance, adc_callback, ADC_CALLBACK_READ_BUFFER);
    1124:	4c06      	ldr	r4, [pc, #24]	; (1140 <configure_adc+0x7c>)
    1126:	2200      	movs	r2, #0
    1128:	490b      	ldr	r1, [pc, #44]	; (1158 <configure_adc+0x94>)
    112a:	0020      	movs	r0, r4
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <configure_adc+0x98>)
    112e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    1130:	7ee3      	ldrb	r3, [r4, #27]
    1132:	2201      	movs	r2, #1
    1134:	4313      	orrs	r3, r2
    1136:	76e3      	strb	r3, [r4, #27]
}
    1138:	b00d      	add	sp, #52	; 0x34
    113a:	bd30      	pop	{r4, r5, pc}
    113c:	00000141 	.word	0x00000141
    1140:	20000a34 	.word	0x20000a34
    1144:	42004400 	.word	0x42004400
    1148:	00000185 	.word	0x00000185
    114c:	0000011d 	.word	0x0000011d
    1150:	00001564 	.word	0x00001564
    1154:	e000e100 	.word	0xe000e100
    1158:	00001009 	.word	0x00001009
    115c:	00000761 	.word	0x00000761

00001160 <configure_can>:
void configure_can(void) {
    1160:	b5f0      	push	{r4, r5, r6, r7, lr}
    1162:	46c6      	mov	lr, r8
    1164:	b500      	push	{lr}
    1166:	b08a      	sub	sp, #40	; 0x28
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1168:	ae09      	add	r6, sp, #36	; 0x24
    116a:	2400      	movs	r4, #0
    116c:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    116e:	2501      	movs	r5, #1
    1170:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    1172:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    1174:	2306      	movs	r3, #6
    1176:	4698      	mov	r8, r3
    1178:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    117a:	0031      	movs	r1, r6
    117c:	2018      	movs	r0, #24
    117e:	4f20      	ldr	r7, [pc, #128]	; (1200 <configure_can+0xa0>)
    1180:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    1182:	4643      	mov	r3, r8
    1184:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(PIN_PA25G_CAN0_RX, &pin_config);
    1186:	0031      	movs	r1, r6
    1188:	2019      	movs	r0, #25
    118a:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->clock_source = GCLK_GENERATOR_8;
    118c:	2308      	movs	r3, #8
    118e:	466a      	mov	r2, sp
    1190:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
    1192:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
    1194:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
    1196:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
    1198:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
    119a:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
    119c:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
    119e:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
    11a0:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
    11a2:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
    11a4:	2301      	movs	r3, #1
    11a6:	425b      	negs	r3, r3
    11a8:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    11aa:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
    11ac:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
    11ae:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
    11b0:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
    11b2:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    11b4:	2302      	movs	r3, #2
    11b6:	7453      	strb	r3, [r2, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    11b8:	7493      	strb	r3, [r2, #18]
	config->remote_frames_standard_reject = true;
    11ba:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
    11bc:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    11be:	4b11      	ldr	r3, [pc, #68]	; (1204 <configure_can+0xa4>)
    11c0:	9306      	str	r3, [sp, #24]
	config->rx_fifo_0_overwrite = true;
    11c2:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
    11c4:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
    11c6:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
    11c8:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
    11ca:	2320      	movs	r3, #32
    11cc:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
    11ce:	3301      	adds	r3, #1
    11d0:	54d4      	strb	r4, [r2, r3]
	can_init(&can_instance, CAN_MODULE, &config_can);
    11d2:	4c0d      	ldr	r4, [pc, #52]	; (1208 <configure_can+0xa8>)
    11d4:	490d      	ldr	r1, [pc, #52]	; (120c <configure_can+0xac>)
    11d6:	0020      	movs	r0, r4
    11d8:	4b0d      	ldr	r3, [pc, #52]	; (1210 <configure_can+0xb0>)
    11da:	4798      	blx	r3
	can_start(&can_instance);
    11dc:	0020      	movs	r0, r4
    11de:	4b0d      	ldr	r3, [pc, #52]	; (1214 <configure_can+0xb4>)
    11e0:	4798      	blx	r3
    11e2:	2280      	movs	r2, #128	; 0x80
    11e4:	0212      	lsls	r2, r2, #8
    11e6:	4b0c      	ldr	r3, [pc, #48]	; (1218 <configure_can+0xb8>)
    11e8:	601a      	str	r2, [r3, #0]
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    11ea:	6822      	ldr	r2, [r4, #0]
    11ec:	6d51      	ldr	r1, [r2, #84]	; 0x54
    11ee:	23c0      	movs	r3, #192	; 0xc0
    11f0:	055b      	lsls	r3, r3, #21
    11f2:	430b      	orrs	r3, r1
    11f4:	6553      	str	r3, [r2, #84]	; 0x54
}
    11f6:	b00a      	add	sp, #40	; 0x28
    11f8:	bc04      	pop	{r2}
    11fa:	4690      	mov	r8, r2
    11fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	00000eed 	.word	0x00000eed
    1204:	1fffffff 	.word	0x1fffffff
    1208:	200009ec 	.word	0x200009ec
    120c:	42001c00 	.word	0x42001c00
    1210:	00000881 	.word	0x00000881
    1214:	00000b7d 	.word	0x00000b7d
    1218:	e000e100 	.word	0xe000e100

0000121c <loop_adc>:
	
}

// Loop functions

void loop_adc(void) {
    121c:	b510      	push	{r4, lr}
	// Make sure this is the start of a sequence, and not in the middle of one
	if(adc_channel_index == 0) {
    121e:	4b0e      	ldr	r3, [pc, #56]	; (1258 <loop_adc+0x3c>)
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d000      	beq.n	1228 <loop_adc+0xc>
		adc_set_positive_input(&adc_instance, adc_channel[adc_channel_index]);
		adc_read_buffer_job(&adc_instance, adc_sample_buffer, ADC_NUM_SAMPLES);
	}
	//TODO: anything else? is there even a point to this function?
}
    1226:	bd10      	pop	{r4, pc}
		adc_set_positive_input(&adc_instance, adc_channel[adc_channel_index]);
    1228:	4b0c      	ldr	r3, [pc, #48]	; (125c <loop_adc+0x40>)
    122a:	7819      	ldrb	r1, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    122c:	4b0c      	ldr	r3, [pc, #48]	; (1260 <loop_adc+0x44>)
    122e:	681a      	ldr	r2, [r3, #0]
    1230:	8c13      	ldrh	r3, [r2, #32]
    1232:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1234:	2b00      	cmp	r3, #0
    1236:	d1fb      	bne.n	1230 <loop_adc+0x14>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1238:	8913      	ldrh	r3, [r2, #8]
    123a:	201f      	movs	r0, #31
    123c:	4383      	bics	r3, r0
    123e:	430b      	orrs	r3, r1
	adc_module->INPUTCTRL.reg =
    1240:	8113      	strh	r3, [r2, #8]
    1242:	8c13      	ldrh	r3, [r2, #32]
    1244:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1246:	2b00      	cmp	r3, #0
    1248:	d1fb      	bne.n	1242 <loop_adc+0x26>
		adc_read_buffer_job(&adc_instance, adc_sample_buffer, ADC_NUM_SAMPLES);
    124a:	2204      	movs	r2, #4
    124c:	4905      	ldr	r1, [pc, #20]	; (1264 <loop_adc+0x48>)
    124e:	4804      	ldr	r0, [pc, #16]	; (1260 <loop_adc+0x44>)
    1250:	4b05      	ldr	r3, [pc, #20]	; (1268 <loop_adc+0x4c>)
    1252:	4798      	blx	r3
}
    1254:	e7e7      	b.n	1226 <loop_adc+0xa>
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	200009c9 	.word	0x200009c9
    125c:	20000004 	.word	0x20000004
    1260:	20000a34 	.word	0x20000a34
    1264:	200009d4 	.word	0x200009d4
    1268:	00000775 	.word	0x00000775

0000126c <loop_can>:
void loop_i2c(void) {
	//TODO: Dion to add stuff
	i2c_section_done = true; // dummy code for now
}

void loop_can(void) {
    126c:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
    126e:	2300      	movs	r3, #0
    1270:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1272:	2388      	movs	r3, #136	; 0x88
    1274:	041b      	lsls	r3, r3, #16
    1276:	9301      	str	r3, [sp, #4]
	struct can_tx_element tx_elem;
	can_get_tx_buffer_element_defaults(&tx_elem);
	tx_elem.T0.bit.XTD = 1;
    1278:	9a00      	ldr	r2, [sp, #0]
    127a:	2380      	movs	r3, #128	; 0x80
    127c:	05db      	lsls	r3, r3, #23
    127e:	4313      	orrs	r3, r2
    1280:	9300      	str	r3, [sp, #0]
	
	switch(board_type) {
    1282:	4b11      	ldr	r3, [pc, #68]	; (12c8 <loop_can+0x5c>)
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	2b01      	cmp	r3, #1
    1288:	d00d      	beq.n	12a6 <loop_can+0x3a>
    128a:	2b00      	cmp	r3, #0
    128c:	d003      	beq.n	1296 <loop_can+0x2a>
    128e:	2b02      	cmp	r3, #2
    1290:	d011      	beq.n	12b6 <loop_can+0x4a>
		tx_elem.T1.bit.DLC = 4;
		convert_16_bit_to_byte_array(adc_channel_vals[0], tx_elem.data);
		convert_16_bit_to_byte_array(adc_channel_vals[1], tx_elem.data + 2);
		break;
	}
}
    1292:	b004      	add	sp, #16
    1294:	4770      	bx	lr
		tx_elem.T1.bit.DLC = 4;
    1296:	9b01      	ldr	r3, [sp, #4]
    1298:	4a0c      	ldr	r2, [pc, #48]	; (12cc <loop_can+0x60>)
    129a:	401a      	ands	r2, r3
    129c:	2380      	movs	r3, #128	; 0x80
    129e:	02db      	lsls	r3, r3, #11
    12a0:	4313      	orrs	r3, r2
    12a2:	9301      	str	r3, [sp, #4]
    12a4:	e7f5      	b.n	1292 <loop_can+0x26>
		tx_elem.T1.bit.DLC = 6;
    12a6:	9b01      	ldr	r3, [sp, #4]
    12a8:	4a08      	ldr	r2, [pc, #32]	; (12cc <loop_can+0x60>)
    12aa:	401a      	ands	r2, r3
    12ac:	23c0      	movs	r3, #192	; 0xc0
    12ae:	02db      	lsls	r3, r3, #11
    12b0:	4313      	orrs	r3, r2
    12b2:	9301      	str	r3, [sp, #4]
    12b4:	e7ed      	b.n	1292 <loop_can+0x26>
		tx_elem.T1.bit.DLC = 4;
    12b6:	9b01      	ldr	r3, [sp, #4]
    12b8:	4a04      	ldr	r2, [pc, #16]	; (12cc <loop_can+0x60>)
    12ba:	401a      	ands	r2, r3
    12bc:	2380      	movs	r3, #128	; 0x80
    12be:	02db      	lsls	r3, r3, #11
    12c0:	4313      	orrs	r3, r2
    12c2:	9301      	str	r3, [sp, #4]
}
    12c4:	e7e5      	b.n	1292 <loop_can+0x26>
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	20000015 	.word	0x20000015
    12cc:	fff0ffff 	.word	0xfff0ffff

000012d0 <main>:


int main (void)
{
    12d0:	b570      	push	{r4, r5, r6, lr}
	system_init();
    12d2:	4b2e      	ldr	r3, [pc, #184]	; (138c <main+0xbc>)
    12d4:	4798      	blx	r3

	// If code is configured to use pinstraps, do so. If not, leave at default
	if(USE_PINSTRAPS) {
		board_id = get_pinstrap_id();
    12d6:	4b2e      	ldr	r3, [pc, #184]	; (1390 <main+0xc0>)
    12d8:	4798      	blx	r3
    12da:	4a2e      	ldr	r2, [pc, #184]	; (1394 <main+0xc4>)
    12dc:	7010      	strb	r0, [r2, #0]
 * ID = 4 to 7: S2C_BOARD_TIRE_TEMP
 * ID = 8:		S2C_BOARD_RADIATOR
 * All others:	S2C_BOARD_OTHER
 */
static inline enum s2c_board_type get_board_type_from_id(uint8_t id) {
	if(id < 4) { // covers 0, 1, 2, 3
    12de:	2803      	cmp	r0, #3
    12e0:	d92c      	bls.n	133c <main+0x6c>
		return S2C_BOARD_WHEEL;
	} else if(id < 8) { // 4, 5, 6, 7
    12e2:	2807      	cmp	r0, #7
    12e4:	d935      	bls.n	1352 <main+0x82>
		return S2C_BOARD_TIRE_TEMP;
	} else if(id == 8) {
    12e6:	2808      	cmp	r0, #8
    12e8:	d13c      	bne.n	1364 <main+0x94>
	}
	board_type = get_board_type_from_id(board_id);
    12ea:	2202      	movs	r2, #2
    12ec:	4b2a      	ldr	r3, [pc, #168]	; (1398 <main+0xc8>)
    12ee:	701a      	strb	r2, [r3, #0]
	case S2C_BOARD_TIRE_TEMP:
		S2C_BOARD_TIRE_TEMP_CONFIG(board_config);
		break;
		
	case S2C_BOARD_RADIATOR:
		S2C_BOARD_RADIATOR_CONFIG(board_config);
    12f0:	4b2a      	ldr	r3, [pc, #168]	; (139c <main+0xcc>)
    12f2:	2101      	movs	r1, #1
    12f4:	7019      	strb	r1, [r3, #0]
    12f6:	705a      	strb	r2, [r3, #1]
    12f8:	2200      	movs	r2, #0
    12fa:	709a      	strb	r2, [r3, #2]
		break;
    12fc:	e026      	b.n	134c <main+0x7c>
		// 1. read ADC, if needed
		// 2. read I2C, if needed
		// 3. send data over CAN
		// 
		
		if(board_config.use_adc) loop_adc();
    12fe:	47b0      	blx	r6
    1300:	e010      	b.n	1324 <main+0x54>
	i2c_section_done = true; // dummy code for now
    1302:	2201      	movs	r2, #1
    1304:	4b26      	ldr	r3, [pc, #152]	; (13a0 <main+0xd0>)
    1306:	701a      	strb	r2, [r3, #0]
		if(board_config.use_i2c) loop_i2c();
		
		// Send data over CAN once it is all available. Would it be more efficient to send it as it's partially available?
		if(adc_section_done && i2c_section_done) {
    1308:	4b26      	ldr	r3, [pc, #152]	; (13a4 <main+0xd4>)
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d006      	beq.n	131e <main+0x4e>
			loop_can();
    1310:	4b25      	ldr	r3, [pc, #148]	; (13a8 <main+0xd8>)
    1312:	4798      	blx	r3
			adc_section_done = i2c_section_done = false;
    1314:	2300      	movs	r3, #0
    1316:	4a22      	ldr	r2, [pc, #136]	; (13a0 <main+0xd0>)
    1318:	7013      	strb	r3, [r2, #0]
    131a:	4a22      	ldr	r2, [pc, #136]	; (13a4 <main+0xd4>)
    131c:	7013      	strb	r3, [r2, #0]
		if(board_config.use_adc) loop_adc();
    131e:	782b      	ldrb	r3, [r5, #0]
    1320:	2b00      	cmp	r3, #0
    1322:	d1ec      	bne.n	12fe <main+0x2e>
		if(board_config.use_i2c) loop_i2c();
    1324:	78a3      	ldrb	r3, [r4, #2]
    1326:	2b00      	cmp	r3, #0
    1328:	d1eb      	bne.n	1302 <main+0x32>
		if(adc_section_done && i2c_section_done) {
    132a:	4b1e      	ldr	r3, [pc, #120]	; (13a4 <main+0xd4>)
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	2b00      	cmp	r3, #0
    1330:	d0f5      	beq.n	131e <main+0x4e>
    1332:	4b1b      	ldr	r3, [pc, #108]	; (13a0 <main+0xd0>)
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	2b00      	cmp	r3, #0
    1338:	d0f1      	beq.n	131e <main+0x4e>
    133a:	e7e9      	b.n	1310 <main+0x40>
	board_type = get_board_type_from_id(board_id);
    133c:	2200      	movs	r2, #0
    133e:	4b16      	ldr	r3, [pc, #88]	; (1398 <main+0xc8>)
    1340:	701a      	strb	r2, [r3, #0]
		S2C_BOARD_WHEEL_CONFIG(board_config);
    1342:	4b16      	ldr	r3, [pc, #88]	; (139c <main+0xcc>)
    1344:	3201      	adds	r2, #1
    1346:	701a      	strb	r2, [r3, #0]
    1348:	705a      	strb	r2, [r3, #1]
    134a:	709a      	strb	r2, [r3, #2]
		configure_adc();
    134c:	4b17      	ldr	r3, [pc, #92]	; (13ac <main+0xdc>)
    134e:	4798      	blx	r3
    1350:	e00f      	b.n	1372 <main+0xa2>
	board_type = get_board_type_from_id(board_id);
    1352:	2201      	movs	r2, #1
    1354:	4b10      	ldr	r3, [pc, #64]	; (1398 <main+0xc8>)
    1356:	701a      	strb	r2, [r3, #0]
		S2C_BOARD_TIRE_TEMP_CONFIG(board_config);
    1358:	4b10      	ldr	r3, [pc, #64]	; (139c <main+0xcc>)
    135a:	2100      	movs	r1, #0
    135c:	7019      	strb	r1, [r3, #0]
    135e:	7059      	strb	r1, [r3, #1]
    1360:	709a      	strb	r2, [r3, #2]
    1362:	e006      	b.n	1372 <main+0xa2>
	board_type = get_board_type_from_id(board_id);
    1364:	2203      	movs	r2, #3
    1366:	4b0c      	ldr	r3, [pc, #48]	; (1398 <main+0xc8>)
    1368:	701a      	strb	r2, [r3, #0]
	if(board_config.use_adc) {
    136a:	4b0c      	ldr	r3, [pc, #48]	; (139c <main+0xcc>)
    136c:	781b      	ldrb	r3, [r3, #0]
    136e:	2b00      	cmp	r3, #0
    1370:	d1ec      	bne.n	134c <main+0x7c>
	configure_can(); // this is always configured. any use cases where it shouldn't be?
    1372:	4b0f      	ldr	r3, [pc, #60]	; (13b0 <main+0xe0>)
    1374:	4798      	blx	r3
	cpu_irq_enable();
    1376:	2201      	movs	r2, #1
    1378:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <main+0xe4>)
    137a:	701a      	strb	r2, [r3, #0]
    137c:	f3bf 8f5f 	dmb	sy
    1380:	b662      	cpsie	i
		if(board_config.use_adc) loop_adc();
    1382:	4d06      	ldr	r5, [pc, #24]	; (139c <main+0xcc>)
    1384:	4e0c      	ldr	r6, [pc, #48]	; (13b8 <main+0xe8>)
		if(board_config.use_i2c) loop_i2c();
    1386:	002c      	movs	r4, r5
    1388:	e7c9      	b.n	131e <main+0x4e>
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	00000f51 	.word	0x00000f51
    1390:	00001095 	.word	0x00001095
    1394:	20000014 	.word	0x20000014
    1398:	20000015 	.word	0x20000015
    139c:	200009f0 	.word	0x200009f0
    13a0:	200009dd 	.word	0x200009dd
    13a4:	200009dc 	.word	0x200009dc
    13a8:	0000126d 	.word	0x0000126d
    13ac:	000010c5 	.word	0x000010c5
    13b0:	00001161 	.word	0x00001161
    13b4:	20000000 	.word	0x20000000
    13b8:	0000121d 	.word	0x0000121d

000013bc <__libc_init_array>:
    13bc:	b570      	push	{r4, r5, r6, lr}
    13be:	2600      	movs	r6, #0
    13c0:	4d0c      	ldr	r5, [pc, #48]	; (13f4 <__libc_init_array+0x38>)
    13c2:	4c0d      	ldr	r4, [pc, #52]	; (13f8 <__libc_init_array+0x3c>)
    13c4:	1b64      	subs	r4, r4, r5
    13c6:	10a4      	asrs	r4, r4, #2
    13c8:	42a6      	cmp	r6, r4
    13ca:	d109      	bne.n	13e0 <__libc_init_array+0x24>
    13cc:	2600      	movs	r6, #0
    13ce:	f000 f8cb 	bl	1568 <_init>
    13d2:	4d0a      	ldr	r5, [pc, #40]	; (13fc <__libc_init_array+0x40>)
    13d4:	4c0a      	ldr	r4, [pc, #40]	; (1400 <__libc_init_array+0x44>)
    13d6:	1b64      	subs	r4, r4, r5
    13d8:	10a4      	asrs	r4, r4, #2
    13da:	42a6      	cmp	r6, r4
    13dc:	d105      	bne.n	13ea <__libc_init_array+0x2e>
    13de:	bd70      	pop	{r4, r5, r6, pc}
    13e0:	00b3      	lsls	r3, r6, #2
    13e2:	58eb      	ldr	r3, [r5, r3]
    13e4:	4798      	blx	r3
    13e6:	3601      	adds	r6, #1
    13e8:	e7ee      	b.n	13c8 <__libc_init_array+0xc>
    13ea:	00b3      	lsls	r3, r6, #2
    13ec:	58eb      	ldr	r3, [r5, r3]
    13ee:	4798      	blx	r3
    13f0:	3601      	adds	r6, #1
    13f2:	e7f2      	b.n	13da <__libc_init_array+0x1e>
    13f4:	00001574 	.word	0x00001574
    13f8:	00001574 	.word	0x00001574
    13fc:	00001574 	.word	0x00001574
    1400:	00001578 	.word	0x00001578
    1404:	000003f4 	.word	0x000003f4
    1408:	0000065c 	.word	0x0000065c
    140c:	0000065c 	.word	0x0000065c
    1410:	0000065c 	.word	0x0000065c
    1414:	0000065c 	.word	0x0000065c
    1418:	0000065c 	.word	0x0000065c
    141c:	0000065c 	.word	0x0000065c
    1420:	0000065c 	.word	0x0000065c
    1424:	0000065c 	.word	0x0000065c
    1428:	0000065c 	.word	0x0000065c
    142c:	0000065c 	.word	0x0000065c
    1430:	0000065c 	.word	0x0000065c
    1434:	0000065c 	.word	0x0000065c
    1438:	0000065c 	.word	0x0000065c
    143c:	0000065c 	.word	0x0000065c
    1440:	0000065c 	.word	0x0000065c
    1444:	000003dc 	.word	0x000003dc
    1448:	0000065c 	.word	0x0000065c
    144c:	0000065c 	.word	0x0000065c
    1450:	0000065c 	.word	0x0000065c
    1454:	0000065c 	.word	0x0000065c
    1458:	0000065c 	.word	0x0000065c
    145c:	0000065c 	.word	0x0000065c
    1460:	0000065c 	.word	0x0000065c
    1464:	0000065c 	.word	0x0000065c
    1468:	0000065c 	.word	0x0000065c
    146c:	0000065c 	.word	0x0000065c
    1470:	0000065c 	.word	0x0000065c
    1474:	0000065c 	.word	0x0000065c
    1478:	0000065c 	.word	0x0000065c
    147c:	0000065c 	.word	0x0000065c
    1480:	0000065c 	.word	0x0000065c
    1484:	000003ec 	.word	0x000003ec
    1488:	0000065c 	.word	0x0000065c
    148c:	0000065c 	.word	0x0000065c
    1490:	0000065c 	.word	0x0000065c
    1494:	0000065c 	.word	0x0000065c
    1498:	0000065c 	.word	0x0000065c
    149c:	0000065c 	.word	0x0000065c
    14a0:	0000065c 	.word	0x0000065c
    14a4:	0000065c 	.word	0x0000065c
    14a8:	0000065c 	.word	0x0000065c
    14ac:	0000065c 	.word	0x0000065c
    14b0:	0000065c 	.word	0x0000065c
    14b4:	0000065c 	.word	0x0000065c
    14b8:	0000065c 	.word	0x0000065c
    14bc:	0000065c 	.word	0x0000065c
    14c0:	0000065c 	.word	0x0000065c
    14c4:	000003e4 	.word	0x000003e4
    14c8:	0000042c 	.word	0x0000042c
    14cc:	000003c4 	.word	0x000003c4
    14d0:	000003d4 	.word	0x000003d4
    14d4:	000003cc 	.word	0x000003cc
    14d8:	00000002 	.word	0x00000002
    14dc:	00000003 	.word	0x00000003
    14e0:	0000ffff 	.word	0x0000ffff
    14e4:	0000ffff 	.word	0x0000ffff
    14e8:	00000004 	.word	0x00000004
    14ec:	00000005 	.word	0x00000005
    14f0:	00000006 	.word	0x00000006
    14f4:	00000007 	.word	0x00000007
    14f8:	00000008 	.word	0x00000008
    14fc:	00000009 	.word	0x00000009
    1500:	0000000a 	.word	0x0000000a
    1504:	0000000b 	.word	0x0000000b
    1508:	0000ffff 	.word	0x0000ffff
    150c:	0000ffff 	.word	0x0000ffff
    1510:	0000ffff 	.word	0x0000ffff
    1514:	0000ffff 	.word	0x0000ffff
    1518:	0000ffff 	.word	0x0000ffff
    151c:	0000ffff 	.word	0x0000ffff
    1520:	0000ffff 	.word	0x0000ffff
    1524:	0000ffff 	.word	0x0000ffff
    1528:	0000ffff 	.word	0x0000ffff
    152c:	0000ffff 	.word	0x0000ffff
    1530:	00000008 	.word	0x00000008
    1534:	00000009 	.word	0x00000009

00001538 <_adc_apbcmasks>:
    1538:	00020000 00040000                       ........

00001540 <_adc_biascomp_addr>:
    1540:	00806020 00806020                        `.. `..

00001548 <_adc_biascomp_pos>:
    1548:	00000903                                ....

0000154c <_adc_biasrefbuf_addr>:
    154c:	00806020 00806020                        `.. `..

00001554 <_adc_biasrefbuf_pos>:
    1554:	00000600                                ....

00001558 <_adc_extchannel_msb>:
    1558:	0000000b 0000000b                       ........

00001560 <_adc_gclk_ids>:
    1560:	00002221                                !"..

00001564 <adc_interrupt_vectors.13802>:
    1564:	00001a19                                ....

00001568 <_init>:
    1568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    156e:	bc08      	pop	{r3}
    1570:	469e      	mov	lr, r3
    1572:	4770      	bx	lr

00001574 <__init_array_start>:
    1574:	000000e5 	.word	0x000000e5

00001578 <_fini>:
    1578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    157e:	bc08      	pop	{r3}
    1580:	469e      	mov	lr, r3
    1582:	4770      	bx	lr

00001584 <__fini_array_start>:
    1584:	000000bd 	.word	0x000000bd
